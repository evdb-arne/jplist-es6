{"version":3,"sources":["webpack:///webpack/bootstrap","webpack:///./src/1.3.0/actions/sort/sort.action.js","webpack:///./src/1.3.0/actions/pagination/pagination.action.js","webpack:///./src/1.3.0/controls/base/controls/base.control.js","webpack:///./src/1.3.0/services/deep-links.service.js","webpack:///./src/1.3.0/services/storage.service.js","webpack:///./src/1.3.0/actions/filter/filter.action.js","webpack:///./src/1.3.0/content/content-manager.js","webpack:///./src/1.3.0/jplist.js","webpack:///./src/1.3.0/controls/base/groups/base-controls-group.js","webpack:///./src/1.3.0/controls/base/controls/sort/base-sort.control.js","webpack:///./src/1.3.0/controls/base/groups/sort/base-sort-controls-group.js","webpack:///./src/1.3.0/controls/sort/hidden-sort/hidden-sort.control.js","webpack:///./src/1.3.0/controls/sort/buttons-sort/buttons-sort.control.js","webpack:///./src/1.3.0/controls/sort/radio-buttons-sort/radio-buttons-sort.control.js","webpack:///./src/1.3.0/controls/sort/checkbox-sort/checkbox-sort.control.js","webpack:///./src/1.3.0/controls/sort/select-sort/select-sort.control.js","webpack:///./src/1.3.0/controls/base/controls/dropdown/base-dropdown.control.js","webpack:///./src/1.3.0/controls/sort/dropdown-sort/dropdown-sort.control.js","webpack:///./src/1.3.0/controls/base/controls/pagination/base-pagination.control.js","webpack:///./src/1.3.0/controls/base/groups/pagination/base-pagination-controls-group.js","webpack:///./src/1.3.0/controls/pagination/pagination.control.js","webpack:///./src/1.3.0/controls/base/controls/filter/base-text-filter.control.js","webpack:///./src/1.3.0/controls/base/groups/filter/base-text-filter-controls-group.js","webpack:///./src/1.3.0/controls/filter/text-filters/textbox-filter/textbox-filter.control.js","webpack:///./src/1.3.0/controls/base/groups/mixins/checkbox.mixin.js","webpack:///./src/1.3.0/controls/filter/text-filters/checkbox-text-filter/checkbox-text-filter.control.js","webpack:///./src/1.3.0/controls/base/groups/mixins/radio-buttons.mixin.js","webpack:///./src/1.3.0/controls/filter/text-filters/radio-buttons-text-filter/radio-buttons-text-filter.control.js","webpack:///./src/1.3.0/controls/base/groups/mixins/buttons.mixin.js","webpack:///./src/1.3.0/controls/filter/text-filters/buttons-text-filter/buttons-text-filter.control.js","webpack:///./src/1.3.0/controls/base/controls/filter/base-path-filter.control.js","webpack:///./src/1.3.0/controls/base/groups/filter/base-path-filter-controls-group.js","webpack:///./src/1.3.0/controls/filter/path-filters/select-filter/select-filter.control.js","webpack:///./src/1.3.0/controls/filter/path-filters/checkbox-path-filter/checkbox-path-filter.control.js","webpack:///./src/1.3.0/controls/filter/path-filters/radio-buttons-path-filter/radio-buttons-path-filter.control.js","webpack:///./src/1.3.0/controls/filter/path-filters/buttons-path-filter/buttons-path-filter.control.js","webpack:///./src/1.3.0/controls/filter/path-filters/dropdown-filter/dropdown-filter.control.js","webpack:///./src/1.3.0/controls/base/controls/filter/base-range-filter.control.js","webpack:///./src/1.3.0/controls/base/groups/filter/base-range-filter-controls-group.js","webpack:///./src/1.3.0/controls/filter/range-filters/buttons-range-filter/buttons-range-filter.control.js","webpack:///./src/1.3.0/controls/base/controls/slider/base-slider.control.js","webpack:///./src/1.3.0/controls/filter/range-filters/slider-range-filter/slider-range-filter.control.js","webpack:///./src/1.3.0/controls/no-results/no-results.control.js","webpack:///./src/1.3.0/controls/layout/layout.control.js","webpack:///./src/1.3.0/controls/reset/reset.control.js","webpack:///./src/1.3.0/controls/counter/counter.control.js","webpack:///./src/1.3.0/index.js"],"names":["installedModules","__webpack_require__","moduleId","exports","module","i","l","modules","call","m","c","d","name","getter","o","Object","defineProperty","enumerable","get","r","Symbol","toStringTag","value","t","mode","__esModule","ns","create","key","bind","n","object","property","prototype","hasOwnProperty","p","s","SortAction","items","options","length","sort","item1","item2","sortByIndex","sortHelper","optionsIndex","result","option","path","dataType","sortNumbers","order","sortDateTime","dateTimeFormat","sortText","ignoreRegex","el1","querySelector","el2","text1","textContent","trim","toLowerCase","text2","regexExpr","RegExp","replace","localeCompare","number1","number2","parseFloat","isNaN","Number","jplistIndex","date1","date2","datetime1","datetime2","getDateFromString","Date","parse","getTime","dateTimeString","year","getDateWildcardValue","day","month","getMonthByWildcard","hour","minute","second","wildcard","datetimeString","regexValue","match","exec","monthNumberOrName","monthIndex","months","findIndex","monthAliasesArray","find","monthAlias","currentPage","itemsPerPage","itemsNumber","range","this","isInteger","pagesNumber","Math","ceil","start","end","prevPage","nextPage","halfRange","rangeStart","rangeEnd","min","max","element","initialHTML","outerHTML","type","getAttribute","group","id","jump","DeepLinksService","param","parts","split","hash","hashStart","paramsMap","Map","formattedHash","window","decodeURIComponent","params","currentGroupName","pair","getParam","has","set","groupValues","push","StorageService","storage","e","deepLink","expiration","cValue","encodeURIComponent","exdate","document","cookie","setMinutes","getMinutes","toUTCString","isSupported","cookies","x","substr","indexOf","y","FilterAction","text","filtered","formattedText","item","elements","querySelectorAll","shouldBeAdded","el","elText","startsWith","endsWith","isInverted","isFinite","from","to","itemElements","numbers","num","maxNumber","apply","minNumber","isNumeric","settings","controls","groups","groupName","target","filters","cGroupName","groupValueArr","baseControlsGroups","collectControlsOptions","itemsBlock","fragment","getItemsFragment","sortOptions","filter","filterName","splitted","splitByLogic","handleFilter","and","orOptionsGroupName","or","paginationOptions","paginationAction","bcg","setPaginationOptions","paginatedItems","slice","root","appendChild","sendStateEvent","deepLinking","updateDeepLink","getDeepLink","storageName","cookiesExpiration","filterType","textFilter","pathFilter","rangeFilter","logic","performFilter","orFiltered","Set","temp","Array","orName","undefined","top","jumpEl","jumpElRect","getBoundingClientRect","width","height","getClientRects","clientTop","body","pageYOffset","scroll","stateEvent","CustomEvent","jplistState","baseControlsGroup","control","dispatchEvent","textFilterOptions","pathFilterOptions","rangeFilterOptions","getSortOptions","concat","getTextFilterOptions","getPathFilterOptions","getRangeFilterOptions","getPaginationOptions","createDocumentFragment","hashStr","location","index","href","substring","history","replaceState","deeplink","keys","deepLinkParts","dl","join","groupsMap","groupElements","groupElement","groupValue","controlInstance","map","arr","deepLinkParams","getUrlParams","deepLinkSavedInStorage","jplist","controlTypes","controlClass","controlGroup","addControl","res","findControls","controlsByGroupNames","findControlGroups","groupControls","sameNameControls","findSameNameControls","values","assign","splitByGroupAndName","findGroups","refresh","controlIndex","oldElement","div","createElement","innerHTML","newElement","firstChild","parentNode","replaceChild","splice","resetEvent","detail","sendResetControlsEvent","updateContentFunc","super","regex","multipleSortsNumber","getMultipleSortsNumber","pathsNumber","attr","attributes","nodeName","propIndex","baseSortControl","isEqual","props","k","checkboxes","radios","selected","deepLinkParam","handleRadios","handleCheckboxes","addEventListener","preventDefault","forEach","cb","isEqualTo","radio","classList","add","remove","latestSelectedRadio","getLastSelectedRadio","checked","atLeastOneNotSelectedCheckbox","checkbox","cbArr","str","radioArr","combined","setAttribute","opt","select","panels","openedClass","panel","initialContent","contents","handlePanelsClick","atLeastOnePanelIsOpened","dropdownContent","toggle","contains","close","content","dropdown","buttons","button","btnSortControl","setSelectedButton","getSelectedButton","deepLinkBtn","btn","btnValue","dropdownBtn","setPanelsContent","disabledClass","selectedClass","basePaginationControl","restoreFromDeepLink","pageButtonsHolder","btnTemplate","firstButtons","lastButtons","prevButtons","nextButtons","bindEventHandler","pageButtonClick","itemsPerPageSelects","updateItemsPerPageSelect","itemsPerPageDD","initCustomDropdowns","selectChange","labels","label","template","selects","toString","dd","selectedButton","removeChild","pageButton","setPageAttr","infos","html","info","classesToRemove","className","pageNumber","page","isEnabled","eventName","func","initialText","_text","includeValue","baseTextFilterControl","textChanged","clearButtonID","clearBtn","getElementById","superclass","baseControl","baseButtonControl","basePathFilterControl","selectFilterControl","btnPathFilterControl","Infinity","step","baseRangeFilterControl","BaseSliderControl","isVertical","value1","value2","valInput1","valInput2","callback","handler1","left","getPreviewValue","handler2","dragging","valueInput1","valueInput2","val1Elements","val2Elements","render","resize","stop","inputJump","setValues","minLabel","parentElement","maxLabel","sendCallback","pos1","getInnerValue","pos2","round","update","newStart","newEnd","originalEnd","trunc","position","getHandlerPos","abs","which","handler1ZIndex","getComputedStyle","defaultView","getPropertyValue","handler2ZIndex","style","stopPropagation","setZIndex","handler","rect","size","xy","lefttop","stepValue","fround","rangeHeight","isInitialState","v1","v2","point","touches","pageX","clientX","pageY","clientY","vector","sub","rangeSliderFilterControl","sliderEl","minElements","maxElements","orientation","slider","controlOptions","display","classNames","selectedClassName","groupClassName","handleSelectedControls","handleClasses","resetAllGroups","getLatestSelectedControl","addClassToGroups","cn","selectedGroupClassName","resetControls","baseFilterControl","getFilteredItems","count","countValue","format","getStaticCounterValue","getDynamicCounterValue","event","bubbles","cancelable","evt","createEvent","initCustomEvent","Event","init","resetControl","resetContent"],"mappings":"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","file":"jplist-es6.min.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 0);\n","/**\n * sort action\n */\nclass SortAction{\n\n    /**\n     * general multiple sort\n     * @param {Array.<HTMLElement>} items\n     * @param {Array.<{path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}>} options\n     * if path = 'default' - the original sort should be kept\n     * @return {Array.<HTMLElement>} sorted items\n     */\n    static sort(items, options){\n\n        if(!options || options.length <= 0){\n\n            /**\n             * if no options - return to the default browser sort order\n             */\n            items.sort((item1, item2) => {\n                return SortAction.sortByIndex(item1, item2);\n            });\n\n            return items;\n        }\n\n        items.sort((item1, item2) => {\n\n            /**\n             * start recursive helper\n             */\n            return SortAction.sortHelper(item1, item2, options, 0);\n        });\n\n        return items;\n    }\n\n    /**\n     * recursive sort helper\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {Array.<Object>} options - structure: {path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}\n     * @param {number} optionsIndex\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortHelper(item1, item2, options, optionsIndex){\n\n        if(!options || options.length <= 0 || optionsIndex >= options.length){\n            return 0;\n        }\n\n        let result = 0;\n\n        const option = options[optionsIndex];\n\n        if(option.path !== 'default'){\n\n            switch(option.dataType){\n\n                case 'number': {\n                    result = SortAction.sortNumbers(item1, item2, option.path, option.order);\n                    break;\n                }\n\n                case 'datetime': {\n                    result = SortAction.sortDateTime(item1, item2, option.path, option.order, option.dateTimeFormat);\n                    break;\n                }\n\n                default: {\n                    result = SortAction.sortText(item1, item2, option.path, option.order, option.ignoreRegex);\n                    break;\n                }\n            }\n        }\n        else{\n            result = SortAction.sortByIndex(item1, item2);\n        }\n\n        if(result === 0 && optionsIndex + 1 < options.length){\n\n            //get next result recursive\n            result = SortAction.sortHelper(item1, item2, options, optionsIndex + 1);\n        }\n\n        return result;\n    }\n\n    /**\n     * sort texts\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value\n     * @param {string=} order - asc or desc\n     * @param {string=} ignoreRegex - optional regex that defines charaters that should be ignored before the sorting\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortText(item1, item2, path = '', order = 'asc', ignoreRegex = ''){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let text1 = el1.textContent.trim().toLowerCase();\n        let text2 = el2.textContent.trim().toLowerCase();\n\n        if(ignoreRegex){\n\n            //regex expression that is used to remove irrelevant characters\n            const regexExpr = new RegExp(ignoreRegex, 'ig');\n            text1 = text1.replace(regexExpr, '').trim();\n            text2 = text2.replace(regexExpr, '').trim();\n        }\n\n        if(text1 === text2){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        //compare languages other than English\n        if(''.localeCompare){\n\n            if (order === 'asc') {\n                return text1.localeCompare(text2);\n            }\n            else {\n                return text2.localeCompare(text1);\n            }\n        }\n        else{\n            if (order === 'asc') {\n                return text1 > text2 ? 1 : -1;\n            }\n            else {\n                return text1 < text2 ? 1 : -1;\n            }\n        }\n    }\n\n    /**\n     * sort numbers\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value\n     * @param {string=} order - asc or desc\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortNumbers(item1, item2, path = '', order = 'asc'){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let number1 = el1.textContent.trim().toLowerCase();\n        let number2 = el2.textContent.trim().toLowerCase();\n\n        //remove other characters\n        number1 = parseFloat(number1.replace(/[^-0-9.]+/g,''));\n        number2 = parseFloat(number2.replace(/[^-0-9.]+/g,''));\n\n        if(isNaN(number1) || isNaN(number2)){\n\n            if(isNaN(number1) && isNaN(number2)){\n                return 0;\n            }\n            else {\n                return isNaN(number1) ? 1 : -1;\n            }\n        }\n\n        if(number1 === number2){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        if(order === 'asc'){\n            return number1 - number2;\n        }\n        else{\n            return number2 - number1;\n        }\n    }\n\n\n    /**\n     * sort by initial element index\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortByIndex(item1, item2){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        let number1 = Number(item1.jplistIndex);\n        let number2 = Number(item2.jplistIndex);\n\n        if(isNaN(number1) || isNaN(number2)){\n            return 0;\n        }\n\n        return number1 - number2;\n    }\n\n    // ---------------- DATE TIME ------------------------\n\n    /**\n     * month name that can be used in date time strings\n     * from 0 for January to 11 for December\n     * @returns {Array.<Array.<string>>}\n     */\n    static get months() {\n\n        return [\n            ['january', 'jan', 'jan.'],\n            ['february', 'feb', 'feb.'],\n            ['march', 'mar', 'mar.'],\n            ['april', 'apr', 'apr.'],\n            ['may'],\n            ['june', 'jun.'],\n            ['july', 'jul', 'jul.'],\n            ['august', 'aug', 'aug.'],\n            ['september', 'sep', 'sep.'],\n            ['october', 'oct', 'oct.'],\n            ['november', 'nov', 'nov.'],\n            ['december', 'dec', 'dec.']\n        ];\n    }\n\n    /**\n     * sort datetime\n     * @param {HTMLElement} item1\n     * @param {HTMLElement} item2\n     * @param {string=} path - can be any CSS selector - https://developer.mozilla.org/en-US/docs/Learn/CSS/Introduction_to_CSS/Selectors;\n     * empty path means the whole element; path shouldn't have 'default' value;\n     * @param {string=} order - asc or desc\n     * @param {string=} dateTimeFormat - for example, {month}/{day}/{year}\n     * @return {number} - 0 if equal, <0 if item1 < item2, >0 if item1 > item2\n     */\n    static sortDateTime(item1, item2, path = '', order = 'asc', dateTimeFormat = ''){\n\n        if(!item1 || !item2){\n            return 0;\n        }\n\n        //find elements with the content to sort\n        const el1 = path ? item1.querySelector(path) : item1;\n        const el2 = path ? item2.querySelector(path) : item2;\n\n        if(!el1 || !el2){\n            return 0;\n        }\n\n        let datetime1 = el1.textContent.trim().toLowerCase();\n        let datetime2 = el2.textContent.trim().toLowerCase();\n\n        let date1;\n        let date2;\n\n        dateTimeFormat = dateTimeFormat.trim();\n\n        if(!dateTimeFormat){\n\n            date1 = new Date(Date.parse(datetime1));\n            date2 = new Date(Date.parse(datetime2));\n        }\n        else{\n            date1 = SortAction.getDateFromString(datetime1, dateTimeFormat);\n            date2 = SortAction.getDateFromString(datetime2, dateTimeFormat);\n        }\n\n        if(date1.getTime() === date2.getTime()){\n            return 0;\n        }\n\n        if(!order){\n            order = 'asc';\n        }\n\n        if(order === 'asc'){\n            return date1.getTime() > date2.getTime() ? 1 : -1;\n        }\n        else{\n            return date1.getTime() < date2.getTime() ? 1 : -1;\n        }\n    }\n\n    /**\n     * get date time from string that contains wildcards like {year}, {month}, {day}, {hour}, {min}, {sec}\n     * @param {string} dateTimeString - for example, 01/12/2017\n     * @param {string} dateTimeFormat - for example, {month}/{day}/{year}\n     * @return {Date}\n     */\n    static getDateFromString(dateTimeString, dateTimeFormat){\n\n        //remove special characters\n        dateTimeFormat = dateTimeFormat.replace(/\\./g, '\\\\.');\n        dateTimeFormat = dateTimeFormat.replace(/\\(/g, '\\\\(');\n        dateTimeFormat = dateTimeFormat.replace(/\\)/g, '\\\\)');\n        dateTimeFormat = dateTimeFormat.replace(/\\[/g, '\\\\[');\n        dateTimeFormat = dateTimeFormat.replace(/\\]/g, '\\\\]');\n\n        //get year\n        let year = SortAction.getDateWildcardValue(dateTimeFormat, '{year}', dateTimeString);\n        year = Number(year) || 1900;\n\n        //get day\n        let day = SortAction.getDateWildcardValue(dateTimeFormat, '{day}', dateTimeString);\n        day = Number(day) || 1;\n\n        //get month: integer value representing the month, beginning with 0 for January to 11 for December\n        let month = SortAction.getDateWildcardValue(dateTimeFormat, '{month}', dateTimeString);\n        month = SortAction.getMonthByWildcard(month);\n        if(month === -1){\n            month = 0;\n        }\n\n        //get hour: (0-23)\n        let hour = SortAction.getDateWildcardValue(dateTimeFormat, '{hour}', dateTimeString);\n        hour = Number(hour) || 0;\n\n        //get minute: (0-59)\n        let minute = SortAction.getDateWildcardValue(dateTimeFormat, '{min}', dateTimeString);\n        minute = Number(minute) || 0;\n\n        //get second: (0-59)\n        let second = SortAction.getDateWildcardValue(dateTimeFormat, '{sec}', dateTimeString);\n        second = Number(second) || 0;\n\n        return new Date(year, month, day, hour, minute, second);\n    }\n\n    /**\n     * get datetime format section/item\n     * @param {string} dateTimeFormat - for example, {month}/{day}/{year} or any other string with wildcards; dateTimeFormat should not contain special characters like . ( ) [ ]\n     * @param {string} wildcard - {year}|{month}|{day}|{hour}|{min}|{sec}\n     * @param {string} datetimeString - for example, 01/15/2017\n     * @return {string|null} - returns the specified wildcard value, for example 2017 for {year} wildcard\n     */\n    static getDateWildcardValue(dateTimeFormat, wildcard, datetimeString){\n\n        let result = null;\n\n        //replace the specified wildcard with the (.*)\n        //for example, for wildcard=year the string can be: '{month}/{day}/{year}' => '{month}/{day}/(.*)'\n        let replacedFormat = dateTimeFormat.replace(wildcard, '(.*)');\n\n        //replace all other wildcard with .*\n        //for example above it will be: '.*/.*/(.*)'\n        const regexValue = replacedFormat.replace(/{year}|{month}|{day}|{hour}|{min}|{sec}/g, '.*');\n\n        //for example, run '.*/.*/(.*)' regex on 01/15/2017\n        const regex = new RegExp(regexValue, 'g');\n        const match = regex.exec(datetimeString);\n\n        //we get the wildcard value from the given string: 2017 in the example above\n        if(match && match.length > 1){\n            result = match[1];\n        }\n\n        return result;\n    }\n\n    /**\n     * get month number by string\n     * @param {string} monthNumberOrName - month number or name from date time string\n     * @return {number} from 0 for January to 11 for December; -1 if not found;\n     */\n    static getMonthByWildcard(monthNumberOrName){\n\n        monthNumberOrName = monthNumberOrName ? monthNumberOrName.trim().toLowerCase() : '';\n\n        let monthIndex = Number(monthNumberOrName);\n\n        if(!isNaN(monthIndex)){\n\n            if(monthIndex - 1 < 0){\n                return -1;\n            }\n            else {\n                return monthIndex - 1;\n            }\n        }\n\n        //find month index by value\n        return SortAction.months.findIndex((monthAliasesArray) => {\n\n            return monthAliasesArray.find(monthAlias => {\n                return monthAlias.trim() === monthNumberOrName;\n            });\n        });\n    }\n}\n\nexport default SortAction;","/**\n * pagination\n */\nclass PaginationAction{\n\n    /**\n     * Pagination\n     * @constructor\n     * @param {number} currentPage\n     * @param {number} itemsPerPage\n     * @param {number} itemsNumber\n     * @param {number} range\n     */\n    constructor(currentPage, itemsPerPage, itemsNumber, range){\n\n        this.itemsNumber = Number(itemsNumber) || 0;\n        this.itemsPerPage = Number.isInteger(itemsPerPage) ? Number(itemsPerPage) : this.itemsNumber;\n\n        if(this.itemsPerPage === 0){\n            this.itemsPerPage = itemsNumber;\n        }\n\n        this.pagesNumber = this.itemsPerPage === 0 ? 0 : Math.ceil(this.itemsNumber/this.itemsPerPage);\n\n        //validate current page\n        this.currentPage = Number(currentPage) || 0;\n\n        if(this.currentPage > this.pagesNumber - 1){\n            this.currentPage = 0;\n        }\n\n        this.start = this.currentPage * this.itemsPerPage;\n        this.end = this.start + this.itemsPerPage;\n\n        //validate the end\n        if(this.end > this.itemsNumber){\n            this.end = this.itemsNumber;\n        }\n\n        this.prevPage = this.currentPage <= 0 ? 0 : this.currentPage - 1;\n        this.nextPage = this.pagesNumber === 0 ? 0 : (this.currentPage >= this.pagesNumber - 1 ? this.pagesNumber - 1 : this.currentPage + 1);\n\n        this.range = Number(range) || 10;\n\n        const halfRange = Math.ceil((this.range - 1) / 2);\n        this.rangeStart = this.currentPage - halfRange;\n        this.rangeEnd = Math.min(this.rangeStart + this.range - 1, this.pagesNumber - 1);\n\n        if(this.rangeStart <= 0){\n            this.rangeStart = 0;\n            this.rangeEnd = Math.min(this.range - 1, this.pagesNumber - 1);\n        }\n\n        if(this.rangeEnd >= this.pagesNumber - 1){\n            this.rangeStart = Math.max(this.pagesNumber - this.range, 0);\n            this.rangeEnd = this.pagesNumber - 1;\n        }\n    }\n}\n\nexport default PaginationAction;","/**\n * jPList Base Control\n * Each jPList control should extend this base control.\n */\nclass BaseControl{\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n\n        if(element) {\n\n            this.element = element;\n\n            /**\n             * element initial html\n             * @type {string}\n             */\n            this.element.initialHTML = element.outerHTML;\n\n            /**\n             * used to define appropriate class for the control\n             * @type {string} required\n             */\n            this.type = (element.getAttribute('data-jplist-control') || '').trim().toLowerCase();\n\n            /**\n             * used to define the elements group that is influenced by this control\n             * @type {string=} optional\n             */\n            this.group = (element.getAttribute('data-group') || '').trim().toLowerCase();\n\n            /**\n             * control name\n             * @type {string} optional\n             */\n            this.name = (element.getAttribute('data-name') || element.getAttribute('name') || 'default').trim();\n\n            /**\n             * deep link parameter name\n             * @type {string} optional\n             */\n            this.id = (element.getAttribute('data-id') || '').trim().toLowerCase();\n\n            /**\n             * jump to an element after the action;\n             * and CSS selector or \"top\" keyword\n             * @type {string} optional\n             */\n            this.jump = (element.getAttribute('data-jump') || '').trim();\n        }\n    }\n}\n\nexport default BaseControl;","class DeepLinksService{\n\n    /**\n     * take param1=val1 and return an object of the structure { key: param1, value: val1 }\n     * @param param {string}\n     * @return {object|null}\n     */\n    static getParam(param){\n\n        if(!param) return null;\n\n        const parts = param.split('=');\n\n        if(parts.length < 2) return null;\n\n        return {\n            key: parts[0].trim().toLowerCase(),\n            value: parts[1].trim().toLowerCase()\n        };\n    }\n\n    /**\n     * get deep link parameters from URL\n     * @param {string} hash - window.location.hash value\n     * @param {string=} hashStart - optional value of hash start; by default it's '#', but can be changed for example to be '#!'\n     * @return {Map} params - structure: [groupName, [{key, value}, ...]], ...\n     *\n     * URL structure example:\n     * https://www.example.com?param1=val1&param2=val2#group=gr1&param1=val1&param2=val2&group=gr2&param1=val1&param2=val2...\n     */\n    static getUrlParams(hash, hashStart = '#'){\n\n        const paramsMap = new Map();\n\n        if(!hash) return paramsMap;\n\n        const formattedHash = window.decodeURIComponent(hash.replace(hashStart, '')).trim().toLowerCase();\n\n        if(!formattedHash) return paramsMap;\n\n        const params = formattedHash.split('&');\n\n        let currentGroupName = '';\n\n        for(let pair of params){\n\n            const param = DeepLinksService.getParam(pair);\n\n            if(!param) continue;\n\n            if(param.key === 'group'){\n\n                currentGroupName = param.value;\n\n                //insert group name if doesn't exist\n                if(!paramsMap.has(param.value)){\n\n                    paramsMap.set(param.value, []);\n                }\n            }\n            else{\n                const groupValues = paramsMap.get(currentGroupName);\n\n                if(groupValues){\n                    groupValues.push(param);\n                }\n\n                paramsMap.set(currentGroupName, groupValues);\n            }\n        }\n\n        return paramsMap;\n    }\n}\n\nexport default DeepLinksService;","/**\n * local storage, session storage, cookies\n */\nclass StorageService{\n\n    /**\n     * is storage supported?\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @return {boolean}\n     */\n    static isSupported(storage){\n\n        if(storage === 'cookies') return true;\n\n        try{\n            return storage in window && window[storage] !== null;\n        }\n        catch(e){\n            return false;\n        }\n    }\n\n    /**\n     * save to the storage\n     * @param {string} deepLink\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @param {string} key - storage key\n     * @param {number} expiration - cookie expiration in minutes (-1 = cookies expire when browser is closed)\n     */\n    static set(deepLink, storage, key, expiration = -1){\n\n        if(storage === 'cookies'){\n\n            const cValue = encodeURIComponent(deepLink);\n            const exdate = new Date();\n\n            expiration = Number(expiration) || -1;\n\n            if(expiration === -1){\n                document.cookie = name + '=' + cValue + ';path=/;';\n            }\n            else{\n                exdate.setMinutes(exdate.getMinutes() + expiration);\n                document.cookie = name + '=' + cValue + ';path=/; expires=' + exdate.toUTCString();\n            }\n        }\n        else{\n            if(StorageService.isSupported(storage)) {\n\n                //save json in storage\n                window[storage][key] = deepLink;\n            }\n        }\n    }\n\n    /**\n     * get from storage\n     * @param {string} storage - 'localStorage', 'sessionStorage', 'cookies'\n     * @param {string} key - storage key\n     * @return {string} deepLink\n     */\n    static get(storage, key){\n\n        let deepLink = '';\n\n        if(storage === 'cookies'){\n\n            //get document cookie\n            const cookies = document.cookie.split(';');\n\n            for (let i=0; i<cookies.length; i++){\n\n                let x = cookies[i].substr(0,cookies[i].indexOf('='));\n                let y = cookies[i].substr(cookies[i].indexOf('=') + 1);\n                x = x.replace(/^\\s+|\\s+$/g, '');\n\n                if(x === key){\n                    deepLink = decodeURIComponent(y);\n                    break;\n                }\n            }\n        }\n        else{\n            if(StorageService.isSupported(storage)) {\n                deepLink = window[storage][key] || '';\n            }\n        }\n\n        return deepLink;\n    }\n\n}\n\nexport default StorageService;","/**\n * filter action\n */\nclass FilterAction{\n\n    /**\n     * text filter\n     * this filter returns all items that contains the specified text in the given path\n     * @param {Array.<HTMLElement>} items\n     * @param {string} text\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {string=} mode - contains (default), startsWith, endsWith, equal\n     * @param {string=} ignoreRegex - optional regex that defines what characters should be ignored\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static textFilter(items, text, path='', mode = 'contains', ignoreRegex = ''){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default') return items;\n\n        const formattedText = text.replace(new RegExp(ignoreRegex, 'ig'), '').toLowerCase().trim();\n\n        for(let item of items){\n\n            const elements = path ? item.querySelectorAll(path) : [item];\n\n            if(!elements) continue;\n\n            let shouldBeAdded = false;\n\n            for(let el of elements){\n\n                const elText = el.textContent.replace(new RegExp(ignoreRegex, 'ig'), '').toLowerCase().trim();\n\n                switch(mode){\n\n                    case 'startsWith':{\n\n                        if(elText.startsWith(formattedText)){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n\n                    case 'endsWith':{\n\n                        if(elText.endsWith(formattedText)){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n\n                    case 'equal':{\n\n                        if(elText === formattedText){\n                            shouldBeAdded = true;\n                        }\n                        break;\n                    }\n\n                    default:{\n\n                        //contains\n                        if(elText.indexOf(formattedText) !== -1){\n                            shouldBeAdded = true;\n                        }\n\n                        break;\n                    }\n                }\n\n                if(shouldBeAdded) break;\n            }\n\n            if(shouldBeAdded){\n                filtered.push(item);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * path filter\n     * only items with the given path are returned\n     * @param {Array.<HTMLElement>} items\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {boolean} isInverted - if true, return all items that DON'T contain the specified path\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static pathFilter(items, path='', isInverted = false){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default' || !path) return items;\n\n        for(let item of items){\n\n            const el = item.querySelector(path);\n\n            if(el && !isInverted || !el && isInverted){\n                filtered.push(item);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * check if n is a number\n     * @param {*} n\n     * @returns {boolean}\n     */\n    static isNumeric(n)\n    {\n        return !isNaN(parseFloat(n)) && isFinite(n);\n    }\n\n    /**\n     * range filter\n     * return only elements that satisfy the following condition:\n     * all numbers in the element's content are in the following range: min <= from <= (all numbers in the element) <= to <= max\n     * @param {Array.<HTMLElement>} items\n     * @param {string=} path - any CSS selector or empty value meaning the whole element\n     * @param {number} from\n     * @param {number} to\n     * @param {number=} min\n     * @param {number=} max\n     * @return {Array.<HTMLElement>} filtered items\n     */\n    static rangeFilter(items, path='', from, to, min = from, max = to){\n\n        const filtered = [];\n\n        if(!items) return [];\n\n        if(path === 'default') return items;\n\n        from = Math.max(from, min);\n        to = Math.min(to, max);\n\n        for(let item of items){\n\n            const itemElements = path ? item.querySelectorAll(path) : [item];\n\n            if(!itemElements) continue;\n\n            //find all numbers within the element\n            const numbers = [];\n\n            for(let el of itemElements){\n\n                const num = Number(el.textContent.trim().replace(/[^-0-9.]+/g,''));\n\n                if(!isNaN(num)){\n                    numbers.push(num);\n                }\n            }\n\n            if(numbers.length > 0){\n\n                //find max and min number of all found within the element numbers\n                const maxNumber = Math.max.apply(Math, numbers);\n                const minNumber = Math.min.apply(Math, numbers);\n\n                let shouldBeAdded = true;\n\n                if(FilterAction.isNumeric(from) && from > minNumber){\n                    shouldBeAdded = false;\n                }\n\n                if(FilterAction.isNumeric(to) && maxNumber > to){\n                    shouldBeAdded = false;\n                }\n\n                if(shouldBeAdded){\n                    filtered.push(item);\n                }\n            }\n        }\n\n        return filtered;\n    }\n}\n\nexport default FilterAction;","import SortAction from '../actions/sort/sort.action';\nimport PaginationAction from '../actions/pagination/pagination.action';\nimport BaseControl from '../controls/base/controls/base.control';\nimport DeepLinksService from '../services/deep-links.service';\nimport StorageService from '../services/storage.service';\nimport FilterAction from '../actions/filter/filter.action';\n\n/**\n * content manager\n */\nclass ContentManager{\n\n    /**\n     * apply controls on the content groups\n     * @param {Object} settings\n     * @param {Map} controls - controls split by data-group and data-name: [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n     * @param {Map} groups - [groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     * @param {string=} groupName - optional group name; if group name is empty or not provided -> refresh all groups\n     * @param {BaseControl|undefined=} target - the element that triggered the event\n     */\n    static apply(settings, controls, groups, groupName = '', target = undefined){\n\n        if(!controls || !groups) return;\n\n        const filters = [\n            {\n                options: 'pathFilterOptions',\n                name: 'pathFilter'\n            },\n            {\n                options: 'rangeFilterOptions',\n                name: 'rangeFilter'\n            },\n            {\n                options: 'textFilterOptions',\n                name: 'textFilter'\n            }\n        ];\n\n        //group structure is Array.<{root: HTMLElement, items: Array.<HTMLElement>}>\n        for(let [cGroupName, groupValueArr] of groups){\n\n            if((groupName && groupName === cGroupName) || !groupName){\n\n                //get controls of this group;\n                //received controls array [BaseControlsGroup1, BaseControlsGroup2, ...]\n                const baseControlsGroups = controls.get(cGroupName);\n\n                //collect sort, pagination and filter options from all controls with the same group name\n                const options = ContentManager.collectControlsOptions(baseControlsGroups);\n\n                //there can be more than one block of items with the same group name\n                //each itemsBlock has structure: {root: HTMLElement, items: Array.<HTMLElement>}\n                for(let itemsBlock of groupValueArr){\n\n                    let itemsNumber = itemsBlock.items.length;\n\n                    //hide all elements moving them to the document fragment\n                    let fragment = ContentManager.getItemsFragment(itemsBlock.items);\n\n                    if(options.sortOptions && options.sortOptions.length > 0) {\n\n                        //sort the items of the group using sort options of all controls\n                        SortAction.sort(itemsBlock.items, options.sortOptions);\n                        fragment = ContentManager.getItemsFragment(itemsBlock.items);\n                    }\n\n                    let filtered = itemsBlock.items;\n                    for(let filter of filters){\n\n                        //pathFilterOptions, rangeFilterOptions or textFilterOptions\n                        const filterName = filter.options;\n\n                        if(options[filterName]){\n\n                            const splitted = ContentManager.splitByLogic(options[filterName]);\n\n                            //apply \"AND\" filter\n                            filtered = ContentManager.handleFilter(filtered, splitted.and, 'and', filter.name);\n\n                            //apply \"OR\" filters\n                            for(let orOptionsGroupName in splitted.or){\n                                filtered = ContentManager.handleFilter(filtered, splitted.or[orOptionsGroupName], 'or', filter.name);\n                            }\n\n                            itemsNumber = filtered.length;\n                            fragment = ContentManager.getItemsFragment(filtered);\n                        }\n                    }\n\n                    if(options.paginationOptions){\n\n                        const paginationAction = new PaginationAction(\n                            options.paginationOptions.currentPage,\n                            options.paginationOptions.itemsPerPage,\n                            filtered.length,\n                            options.paginationOptions.range\n                        );\n\n                        //setPaginationOptions applies all computed properties of PaginationAction class to the latest pagination control\n                        if(baseControlsGroups.length > 0){\n\n                            for(let bcg of baseControlsGroups){\n                                if(bcg.setPaginationOptions){\n                                    bcg.setPaginationOptions(paginationAction);\n                                }\n                            }\n                        }\n\n                        const paginatedItems = filtered.slice(paginationAction.start, paginationAction.end);\n                        itemsNumber = paginatedItems.length;\n                        fragment = ContentManager.getItemsFragment(paginatedItems);\n                    }\n\n                    //return to HTML only relevant items\n                    itemsBlock.root.appendChild(fragment);\n\n                    //dispatch the event with different data about state of controls and items\n                    ContentManager.sendStateEvent(options, itemsNumber, baseControlsGroups, groups, filtered);\n                }\n\n                //if one of controls has data-jump attribute -> jump to the specified CSS selector or to the top\n                ContentManager.jump(baseControlsGroups, target);\n            }\n\n        }\n\n        if(settings.deepLinking) {\n\n            //update deep link if it's enabled\n            ContentManager.updateDeepLink(ContentManager.getDeepLink(controls, groups), settings.hashStart);\n        }\n        else{\n            if(settings.storage){\n\n                //update storage if it's enabled\n                StorageService.set(ContentManager.getDeepLink(controls, groups), settings.storage, settings.storageName, settings.cookiesExpiration);\n            }\n        }\n    }\n\n    /**\n     * perform filter\n     * @param {object} option\n     * @param {Array.<object>} filtered\n     * @param {string} filterType - 'textFilter', 'rangeFilter' or 'pathFilter'\n     * @returns {Array.<object>}\n     */\n    static performFilter(option, filtered, filterType){\n\n        switch(filterType){\n\n            case 'textFilter' : {\n                return FilterAction.textFilter(\n                    filtered,\n                    option.text,\n                    option.path,\n                    option.mode,\n                    option.ignoreRegex);\n            }\n\n            case 'pathFilter' : {\n                return FilterAction.pathFilter(filtered,\n                    option.path,\n                    option.isInverted);\n            }\n\n            case 'rangeFilter' : {\n                return FilterAction.rangeFilter(filtered,\n                    option.path,\n                    option.from,\n                    option.to,\n                    option.min,\n                    option.max);\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * filter text / path / range\n     * @param {Array.<object>} filtered\n     * @param {Array.<object>} options\n     * @param {string} logic - 'or' / 'and'\n     * @param {string} filterType - 'textFilter', 'rangeFilter' or 'pathFilter'\n     * @returns {Array.<object>}\n     */\n    static handleFilter(filtered, options, logic, filterType){\n\n        if(options.length <= 0) return filtered;\n\n        if(logic === 'and'){\n            for(let option of options){\n                filtered = ContentManager.performFilter(option, filtered, filterType);\n            }\n        }\n\n        if(logic === 'or'){\n\n            let orFiltered = new Set();\n\n            for(let option of options){\n\n                let temp = ContentManager.performFilter(option, filtered, filterType);\n\n                orFiltered = new Set([...orFiltered, ...temp]);\n            }\n\n            filtered = Array.from(orFiltered);\n        }\n\n        return filtered;\n    }\n\n    /**\n     * split array of options by \"OR\" / \"AND\" logic\n     * all options with \"AND\" logic organize 1 group, \"OR\" options can organize multiple groups\n     * @param {Array.<object>} options\n     * @return {object}, {and: [option1, option2, ...], or: {'name1': [option1, options, ...], 'name2': [option1, options, ...], ...}}\n     */\n    static splitByLogic(options){\n\n        const result = {\n            and: [],\n            or: {}\n        };\n\n        for(let option of options){\n\n            const orName = option.or;\n\n            if(!orName){\n                result.and.push(option);\n            }\n            else{\n                if(result.or[orName] === undefined){\n                    result.or[orName] = [option];\n                }\n                else{\n                    result.or[orName].push(option);\n                }\n            }\n        }\n\n        return result;\n    }\n\n    /**\n     * if one of controls has data-jump attribute -> jump to the specified CSS selector or to the top\n     * data-jump=\"any CSS selector or 'top' keyword\"\n     * examples: data-jump=\"header\"\n     *           data-jump=\".top-bar\"\n     *           data-jump=\"#main\"\n     *           data-jump=\"top\"\n     * @param {Array.<BaseControlsGroup>} baseControlsGroups - [BaseControlsGroup1, BaseControlsGroup2, ...]\n     * @param {BaseControl|undefined=} target - the element that triggered the event\n     * @history\n     *      - 21/08/2018 - fixed https://github.com/1rosehip/jplist-es6/issues/11\n     */\n    static jump(baseControlsGroups, target = undefined){\n\n        if(!target || !target.jump) return;\n\n        //if(!baseControlsGroups || baseControlsGroups.length <= 0) return;\n\n        //-1 means no scroll\n        let top = -1;\n\n        //top is always the upper ))\n        if(target.jump === 'top'){\n            top = 0;\n        }\n        else{\n            const jumpEl = document.querySelector(target.jump);\n\n            if(!jumpEl) return;\n\n            const jumpElRect = jumpEl.getBoundingClientRect();\n\n            //make sure element is not hidden or disconnected\n            if (!jumpEl.width && !jumpEl.height && !jumpEl.getClientRects().length) return;\n\n            const clientTop = document.clientTop || document.body.clientTop || 0;\n\n            if(top < 0){\n\n                //select the first jump path as the default value\n                top = jumpElRect.top + window.pageYOffset - clientTop;\n            }\n            else{\n                if(jumpElRect.top + window.pageYOffset - clientTop < top){\n                    top = jumpElRect.top + window.pageYOffset - clientTop;\n                }\n            }\n        }\n\n        if(top >= 0){\n            window.scroll(0, top);\n        }\n    }\n\n    /**\n     * send jPList general event with different data about state of controls and items\n     * @param {object} options\n     * @param {number} itemsNumber\n     * @param {BaseControlsGroup} baseControlsGroups\n     * @param {Map} groups - [groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     * @param {Array.<HTMLElement>} filtered\n     */\n    static sendStateEvent(options, itemsNumber, baseControlsGroups, groups, filtered){\n\n        if(!baseControlsGroups) return;\n\n        const stateEvent = new CustomEvent('jplist.state');\n\n        stateEvent.jplistState = {\n            options: options,\n            itemsNumber: itemsNumber,\n            groups: groups,\n            filtered: filtered\n        };\n\n        for(let baseControlsGroup of baseControlsGroups){\n\n            for(let control of baseControlsGroup.controls){\n\n                control.element.dispatchEvent(stateEvent);\n            }\n        }\n    }\n\n    /**\n     * collect sort, pagination and filter options from all controls with the same group name\n     * @param {Array.<BaseControlsGroup>} baseControlsGroups\n     * @return {object} sort, pagination and filter objects\n     */\n    static collectControlsOptions(baseControlsGroups){\n\n        const options = {\n\n            //there can be multiple sort options\n            sortOptions: [],\n\n            //there should be only one pagination options object;\n            //in case of multiple -> get the latest\n            paginationOptions: null,\n\n            //there can be multiple filter options\n            textFilterOptions: [],\n            pathFilterOptions: [],\n            rangeFilterOptions: []\n        };\n\n        if(!baseControlsGroups) return options;\n\n        for(let baseControlsGroup of baseControlsGroups){\n\n            //get sort options only from sort controls\n            if(baseControlsGroup.getSortOptions) {\n\n                //add base control group sort options\n                options.sortOptions = options.sortOptions.concat(baseControlsGroup.getSortOptions());\n            }\n\n            //get text filter options only from text filter controls\n            if(baseControlsGroup.getTextFilterOptions) {\n\n                //add base control group sort options\n                options.textFilterOptions = options.textFilterOptions.concat(baseControlsGroup.getTextFilterOptions());\n            }\n\n            //get path filter options only from text filter controls\n            if(baseControlsGroup.getPathFilterOptions) {\n\n                //add base control group sort options\n                options.pathFilterOptions = options.pathFilterOptions.concat(baseControlsGroup.getPathFilterOptions());\n            }\n\n            //get range filter options only from range filter controls\n            if(baseControlsGroup.getRangeFilterOptions) {\n\n                //add base control group sort options\n                options.rangeFilterOptions = options.rangeFilterOptions.concat(baseControlsGroup.getRangeFilterOptions());\n            }\n\n            if(baseControlsGroup.getPaginationOptions) {\n                options.paginationOptions = baseControlsGroup.getPaginationOptions();\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * get document fragment with the specified items\n     * @param {Array.<HTMLElement>} items\n     * @return {DocumentFragment}\n     */\n    static getItemsFragment(items){\n\n        const fragment = document.createDocumentFragment();\n\n        for(let item of items){\n            fragment.appendChild(item);\n        }\n\n        return fragment;\n    }\n\n    /**\n     * update deep link -> replace it in URL\n     * @param {string} deepLink\n     * @param {string} hashStart\n     */\n    static updateDeepLink(deepLink, hashStart = '#'){\n\n        let hashStr = deepLink.replace(hashStart, '').trim();\n\n        if(hashStr === ''){\n            hashStr = hashStart;\n        }\n        else{\n            hashStr = hashStart + hashStr;\n        }\n\n        if(window.location.hash !== hashStr){\n\n            const index = window.location.href.indexOf(hashStart);\n            let href;\n\n            if(index === -1){\n                href = window.location.href + hashStr;\n            }\n            else{\n                href = window.location.href.substring(0, index) + hashStr;\n            }\n\n            if('replaceState' in window.history){\n                window.history.replaceState('', '', href);\n            }\n            else{\n                window.location.replace(href);\n            }\n        }\n    }\n\n    /**\n     * update deep link URL according to the current controls states\n     * @return {string} deep link\n     */\n    static getDeepLink(controls, groups){\n\n        let deeplink = [];\n\n        //group structure is Array.<{root: HTMLElement, items: Array.<HTMLElement>}>\n        for(let cGroupName of groups.keys()){\n\n            //get controls of this group;\n            //received controls array [BaseControlsGroup1, BaseControlsGroup2, ...]\n            const baseControlsGroups = controls.get(cGroupName);\n\n            const deepLinkParts = [];\n            for(let baseControlsGroup of baseControlsGroups){\n\n                const dl = baseControlsGroup.getDeepLink();\n\n                if(dl){\n                    deepLinkParts.push(dl);\n                }\n            }\n\n            if(deepLinkParts.length > 0){\n                deeplink.push('group=' + cGroupName);\n                deeplink = deeplink.concat(deepLinkParts);\n            }\n        }\n\n        return deeplink.join('&');\n    }\n\n    /**\n     * find all groups of elements that should be sorted, filtered, etc.\n     * each group defined by data-jplist-group attribute;\n     * each element in the group defined by data-jplist-item attribute;\n     * @param {HTMLCollection} groups\n     * @return {Map} Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>] groups\n     */\n    static findGroups(groups){\n\n        const groupsMap = new Map();\n\n        if(!groups){\n            return groupsMap;\n        }\n\n        //get all items with data attribute data-jplist-group\n        const groupElements = [...groups];\n\n        for(let groupElement of groupElements){\n\n            const groupName = groupElement.getAttribute('data-jplist-group');\n\n            let groupValue = [];\n\n            if(groupsMap.has(groupName)){\n                groupValue = groupsMap.get(groupName);\n            }\n\n            groupValue.push({\n\n                /**\n                 * the root element of the group\n                 */\n                root: groupElement,\n\n                /**\n                 * all group elements\n                 */\n                items: [...groupElement.querySelectorAll('[data-jplist-item]')],\n\n                /**\n                 * this fragment used as a container for invisible items\n                 */\n                fragment: document.createDocumentFragment()\n            });\n\n            groupsMap.set(groupName, groupValue);\n        }\n\n        return groupsMap;\n    }\n\n    /**\n     * find all controls defined on page by data-jplist-control attribute;\n     * control classes should be registered in window.jplist.controlTypes before using this method:\n     * window.jplist.controlTypes = new Map([\n     *      ['hidden-sort', HiddenSortControl],\n     *      ...\n     * ]);\n     * @param {HTMLElement} root\n     * @return {Array.<BaseControl>}\n     */\n    static findControls(root){\n\n        if(!root) return [];\n\n        const controls = [];\n\n        //find all control\n        const elements = root.querySelectorAll('[data-jplist-control]');\n\n        if(elements) {\n\n            for(let element of elements){\n\n                const controlType = element.getAttribute('data-jplist-control');\n\n                if(!controlType) continue;\n\n                const controlInstance = new BaseControl(element);\n                controls.push(controlInstance);\n            }\n        }\n\n        return controls;\n    }\n\n    /**\n     * split control by their data-group property\n     * @param {Array.<BaseControl>} controls\n     * @return {Map} [[groupName, controls array], [...], ...]\n     */\n    static findControlGroups(controls){\n\n        const map = new Map();\n\n        if(controls) {\n\n            for (let control of controls) {\n\n                let arr = [];\n\n                if (map.has(control.group)) {\n                    arr = map.get(control.group);\n                }\n\n                arr.push(control);\n\n                map.set(control.group, arr);\n            }\n        }\n\n        return map;\n    }\n\n    /**\n     * find controls with the same name\n     * @param {object} settings\n     * @param {Array.<BaseControl>} controls\n     * @return {Map} [[name, BaseControlsGroup], [...]]\n     */\n    static findSameNameControls(settings, controls){\n\n        const map = new Map();\n\n        if(controls){\n\n            let deepLinkParams = null;\n\n            if(settings.deepLinking){\n                deepLinkParams = DeepLinksService.getUrlParams(window.location.hash, settings.hashStart);\n            }\n            else{\n                if(settings.storage){\n\n                    const deepLinkSavedInStorage = StorageService.get(settings.storage, settings.storageName);\n                    deepLinkParams = DeepLinksService.getUrlParams(deepLinkSavedInStorage, '');\n                }\n            }\n\n            for(let control of controls){\n\n                //control with not defined type should be ignored\n                if(!control.type || !window.jplist.controlTypes.has(control.type)) continue;\n\n                //check if data-type class defined in window.jplist.controlTypes;\n                //it should be defined like this:\n                //window.jplist.controlTypes = window.jplist.controlTypes || new Map([\n                //    ['hidden-sort', HiddenSortControl],\n                //    ...\n                //]);\n                const controlClass = window.jplist.controlTypes.get(control.type);\n\n                if(controlClass){\n\n                    let controlGroup = null;\n\n                    if (map.has(control.name)) {\n                        controlGroup = map.get(control.name);\n                    }\n                    else{\n                        controlGroup = new controlClass(control.group, control.name, [], deepLinkParams);\n                    }\n\n                    controlGroup.addControl(control);\n\n                    map.set(control.name, controlGroup);\n                }\n            }\n        }\n\n        return map;\n    }\n\n    /**\n     * initialize controls and split them by group and name\n     * @param {object} settings\n     * @param {HTMLElement} root\n     * @return {Map} [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n     */\n    static splitByGroupAndName(settings, root){\n\n        const res = new Map();\n\n        if(!root) return res;\n\n        //find all controls: received {Array.<BaseControl>}\n        const controls = ContentManager.findControls(root);\n\n        //split controls by their data-group attributes;\n        //the received structure is map: [[groupName, controls array], [...], ...]\n        const controlsByGroupNames = ContentManager.findControlGroups(controls);\n\n        for(let [groupName, groupControls] of controlsByGroupNames){\n\n            //received {Map} - [[name, BaseControlsGroup], [...]]\n            const sameNameControls = ContentManager.findSameNameControls(settings, groupControls);\n\n            let arr = [];\n\n            for(let baseControlsGroup of sameNameControls.values()){\n                arr.push(baseControlsGroup);\n            }\n\n            res.set(groupName, arr);\n        }\n\n        return res;\n    }\n}\n\nexport default ContentManager;","import ContentManager from './content/content-manager';\nimport BaseControl from \"./controls/base/controls/base.control\";\n\n/**\n * the main jPList class\n */\nexport default class jPList{\n\n    /**\n     * API: initialize jPList controls + elements from outside\n     * @param {Object} options\n     */\n    init(options){\n\n        this.settings = Object.assign({}, {\n\n            //storage\n            storage: '', //'', 'localStorage', 'sessionStorage', 'cookies'\n            storageName: 'jplist',\n            cookiesExpiration: -1, //cookies expiration in minutes (-1 = cookie expires when browser is closed)\n\n            //deep links\n            deepLinking: false,\n            hashStart: '#' //the start of the hash part, for example it may be '#!key='\n\n        }, options);\n\n        //find all controls split by data-group and data-name\n        this.controls = ContentManager.splitByGroupAndName(this.settings, document.body);\n\n        //find all jplist groups\n        this.elements = document.querySelectorAll('[data-jplist-group]');\n\n        //get from each group the data about its root and items;\n        //the received structure is: Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>}>]\n        this.groups = ContentManager.findGroups(this.elements);\n\n        let items = [...document.querySelectorAll('[data-jplist-item]')];\n\n        //set jPList index for every element\n        //it's used to return to the default browser sorting if needed\n        for(let jplistIndex = 0; jplistIndex < items.length; jplistIndex++){\n\n            items[jplistIndex].jplistIndex = jplistIndex;\n        }\n\n        //first refresh\n        this.refresh('');\n    }\n\n    /**\n     * API: apply controls on content\n     * @param {string=} groupName - optional group name\n     * @param {BaseControl|undefined=} target - the element that triggered the event\n     */\n    refresh(groupName = '', target = undefined){\n        ContentManager.apply(this.settings, this.controls, this.groups, groupName, target);\n    }\n\n    /**\n     * API: reset control by CSS selector and apply it on content\n     * @param {HTMLElement} element\n     */\n    resetControl(element){\n\n        if(!element) return;\n\n        if(this.controls) {\n\n            for (let [groupName, groupControls] of this.controls) {\n                for (let group of groupControls) {\n                    let controlIndex = group.controls.findIndex(control => control.element === element);\n\n                    if(controlIndex >= 0){\n\n                        //find the control\n                        const control = group.controls[controlIndex];\n                        const oldElement = control.element;\n\n                        //create HTML element from outer HTML string\n                        const div = document.createElement('div');\n                        div.innerHTML = oldElement.initialHTML;\n                        const newElement = div.firstChild;\n\n                        if(oldElement.parentNode) {\n\n                            //replace HTML element in the DOM\n                            oldElement.parentNode.replaceChild(newElement, oldElement);\n\n                            //replace the control in the group\n                            group.controls.splice(controlIndex, 1);\n                            group.addControl(new BaseControl(newElement));\n\n                            //update state\n                            this.refresh(groupName);\n                        }\n\n                        return;\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Send reset controls event\n     * @param {string} groupName - optional group name\n     * @private\n     */\n    sendResetControlsEvent(groupName = ''){\n        const resetEvent = new CustomEvent('jplist.reset', {\n            detail: {\n                groupName: groupName\n            }\n        });\n        \n        // Dispatch event on document since controls might be recreated\n        document.dispatchEvent(resetEvent);\n    }\n\n    /**\n     * API: reset all jplist controls and apply them on content\n     * @param {string=} groupName\n     */\n    resetControls(groupName = ''){\n        if(this.controls) {\n            //this.controls is a Map: [groupName, [BaseControlsGroup1, BaseControlsGroup2, ...]]\n            for (let [groupName, groupControls] of this.controls) {\n                for (let group of groupControls) {\n                    for(let control of group.controls){\n                        if (!control.element || !control.element.initialHTML) continue;\n                        control.element.outerHTML = control.element.initialHTML;\n                    }\n                }\n            }\n        }\n\n        //find all controls split by data-group and data-name\n        this.controls = ContentManager.splitByGroupAndName(this.settings, document.body);\n\n        this.refresh(groupName);\n        \n        // Send reset event after everything is done\n        this.sendResetControlsEvent(groupName);\n    }\n\n    /**\n     * API: refresh HTML content after add / remove items\n     * @param {Function} updateContentFunc\n     */\n    resetContent(updateContentFunc){\n\n        for(let [cGroupName, groupValueArr] of this.groups){\n\n            for(let itemsBlock of groupValueArr) {\n\n                //hide all elements moving them to the document fragment\n                let fragment = ContentManager.getItemsFragment(itemsBlock.items);\n\n                itemsBlock.root.appendChild(fragment);\n            }\n        }\n\n        if(updateContentFunc){\n            updateContentFunc(this.groups);\n        }\n\n        //find all jplist groups\n        this.elements = document.querySelectorAll('[data-jplist-group]');\n\n        //get from each group the data about its root and items;\n        //the received structure is: Map[groupName, Array.<{root: HTMLElement, items: Array.<HTMLElement>}>]\n        this.groups = ContentManager.findGroups(this.elements);\n\n        let items = [...document.querySelectorAll('[data-jplist-item]')];\n\n        //set jPList index for every element\n        //it's used to return to the default browser sorting if needed\n        for(let jplistIndex = 0; jplistIndex < items.length; jplistIndex++){\n\n            items[jplistIndex].jplistIndex = jplistIndex;\n        }\n\n        //first refresh\n        this.refresh('');\n\n    }\n\n}","/**\n * represents a group of controls with the same data-name and data-group attributes\n */\nclass BaseControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls, deepLinkParams = null){\n\n        this.group = (group || '').trim().toLowerCase();\n        this.name = (name || 'default').trim();\n        this.controls = controls || [];\n\n        this.deepLinkParams = [];\n\n        if(deepLinkParams && deepLinkParams.has(this.group)){\n\n            this.deepLinkParams = deepLinkParams.get(this.group) || [];\n        }\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     */\n    addControl(control){\n        if(!control || control.name !== this.name || control.group !== this.group) return;\n\n        this.controls.push(control);\n    }\n\n    /**\n     * by default control's deep link is empty\n     * @returns {string}\n     */\n    getDeepLink(){\n        return '';\n    }\n\n}\n\nexport default BaseControlsGroup;","import BaseControl from '../base.control';\n\n/**\n * base sort control\n */\nclass BaseSortControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * optional text (default), number or datetime\n             * @type {string}\n             */\n            this.dataType = (element.getAttribute('data-type') || 'text').trim().toLowerCase();\n\n            /**\n             * optional sort order: asc (default) or desc\n             * @type {string}\n             */\n            this.order = (element.getAttribute('data-order') || 'asc').trim().toLowerCase();\n\n            /**\n             * optional ignore regex - used to ignore characters before sort\n             * @type {string}\n             */\n            this.regex = element.getAttribute('data-regex') || '';\n\n            /**\n             * optional datetime format - datetime structure using wilcards {year}|{month}|{day}|{hour}|{min}|{sec}, for example: {month}/{day}/{year}\n             * @type {string}\n             */\n            this.dateTimeFormat = (element.getAttribute('data-date-format') || '').trim().toLowerCase();\n\n            /**\n             * this property indicates the number of data attribute groups [{data-path, data-order, ...}, {data-path-1, data-order-1,...}, ...]\n             * only data-path attribute is required;\n             * if multipleSortsNum > 0 => multiple sort\n             * @type {number}\n             */\n            this.multipleSortsNumber = this.getMultipleSortsNumber(element);\n\n            for(let index=1; index <= this.multipleSortsNumber; index++){\n                this['path' + index] = (element.getAttribute('data-path-' + index) || '').trim();\n                this['dataType' + index] = (element.getAttribute('data-type-' + index) || 'text').trim().toLowerCase();\n                this['order' + index] = (element.getAttribute('data-order-' + index) || 'asc').trim().toLowerCase();\n                this['regex' + index] = element.getAttribute('data-regex-' + index) || '';\n                this['dateTimeFormat' + index] = (element.getAttribute('data-date-format-' + index) || '').trim().toLowerCase();\n            }\n\n        }\n    }\n\n    /**\n     * multiple sort is defined by another sets of data attributes like {data-path-1, data-order-1,...}, {data-path-2, data-order-2,...} etc\n     * this method counts the number of such sets (= the number of attributes data-path-1, data-path-2, ...)\n     * @param {HTMLElement} element\n     * @return {number}\n     */\n    getMultipleSortsNumber(element){\n\n        let pathsNumber = 0;\n\n        for(let attr of element.attributes){\n\n            let match = null;\n            const regex = /^data-path-([0-9]+)$/g;\n\n            while (match = regex.exec(attr.nodeName)) {\n\n                const propIndex = Number(match[1]);\n\n                if(!Number.isInteger(propIndex)) continue;\n                pathsNumber++;\n            }\n        }\n\n        return pathsNumber;\n    }\n\n    /**\n     * get sort options used in SortAction.sort method\n     * @return {Array.<{path: string, dataType: text|number|datetime, order: asc|desc, ignoreRegex: string, dateTimeFormat: string}>} options\n     */\n    getSortOptions(){\n\n        const options = [];\n\n        //initial path is required\n        if(this.path){\n\n            options.push({\n                path: this.path,\n                dataType: this.dataType,\n                order: this.order,\n                ignoreRegex: this.ignoreRegex,\n                dateTimeFormat: this.dateTimeFormat\n            });\n\n            for(let index = 1; index <= this.multipleSortsNumber; index++){\n\n                options.push({\n                    path: this['path' + index],\n                    dataType: this['dataType' + index],\n                    order: this['order' + index],\n                    ignoreRegex: this['ignoreRegex' + index],\n                    dateTimeFormat: this['dateTimeFormat' + index]\n                });\n            }\n        }\n\n        return options;\n    }\n\n    /**\n     * check if current base sort control has the same properties like the specified base sort control\n     * @param {BaseSortControl} baseSortControl\n     * @return {boolean}\n     */\n    isEqualTo(baseSortControl){\n\n        let isEqual = true;\n\n        const props = ['path', 'dataType', 'order', 'regex', 'dateTimeFormat'];\n\n        for(let i=0; i<props.length; i++){\n\n            isEqual = isEqual && this[props[i]] === baseSortControl[props[i]];\n        }\n\n        isEqual = isEqual && this.multipleSortsNumber === baseSortControl.multipleSortsNumber;\n\n        for(let i=1; i <= this.multipleSortsNumber; i++){\n\n            for(let k=0; k<props.length; k++){\n\n                isEqual = isEqual && this[props[k] + i] === baseSortControl[props[k] + i];\n            }\n        }\n\n        return isEqual;\n    }\n}\n\nexport default BaseSortControl;\n","import BaseControlsGroup from '../base-controls-group';\nimport BaseSortControl from '../../controls/sort/base-sort.control';\n\n/**\n * represents a group of sort controls with the same data-name and data-group attributes\n */\nclass BaseSortControlsGroup extends BaseControlsGroup{\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        for(let control of this.controls){\n            sortOptions = sortOptions.concat(control.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseSortControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseSortControl = new BaseSortControl(control.element);\n\n        this.controls.push(baseSortControl);\n\n        return baseSortControl;\n    }\n}\n\nexport default BaseSortControlsGroup;\n","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\n/**\n * hidden sort jPList control\n *\n * HTML structure:\n * ----------------\n * <div\n *      style=\"display: none\"\n *      data-jplist-control=\"hidden-sort\"\n *      data-group=\"group1\"\n *      data-path=\".title\"\n *      data-type=\"number\"> <!-- possible values: text, number, datetime -->\n * </div>\n *\n * Usage in JS:\n * -------------\n * import HiddenSort from './controls/sort/hidden-sort.control';\n * let control = document.getElementById('my-hidden-sort-control');\n * const hiddenSort = new HiddenSort(control);\n * console.log(hiddenSort.type);\n */\nclass HiddenSortControl extends BaseSortControlsGroup{}\n\nexport default HiddenSortControl;\n","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * sort buttons jPList control\n *\n * Usage:\n * <button\n *  data-jplist-control=\"sort-buttons\"\n *  data-path=\".title\"          <!-- required -->\n *  data-group=\"group1\"         <!-- required -->\n *  data-order=\"asc\"            <!-- optional, asc (default) / desc -->\n *  data-type=\"text\"            <!-- optional, text (default) / number / datetime -->\n *  data-name=\"sort1\"           <!-- required for radio mode -->\n *  data-selected=\"true\"        <!-- optional, true / false (default) -->\n *  data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *  data-regex=\"\"               <!-- optional -->\n *  data-id=\"deep-link-name1\"   <!-- optional, used as deep link url and storage parameter -->\n *  data-mode=\"radio\">          <!-- optional, radio (default) / checkbox -->\n *  Sort by title asc\n * </button>\n *\n * Optional deep link: #deepLinkName1=1&deepLinkName2=1\n * selected value - 1\n * non selected - should not appear in deep link or any value !== 1\n */\nclass ButtonsSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.getAttribute('data-selected') === 'true';\n        baseSortControl.mode = baseSortControl.element.getAttribute('data-mode') || 'radio';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        if(baseSortControl.mode === 'radio'){\n\n            this.radios.push(baseSortControl);\n            this.handleRadios();\n        }\n\n        if(baseSortControl.mode === 'checkbox'){\n\n            this.checkboxes.push(baseSortControl);\n            this.handleCheckboxes();\n        }\n\n        /**\n         * on control click -> change the selected control\n         */\n        baseSortControl.element.addEventListener('click', e => {\n\n            e.preventDefault();\n\n            if(baseSortControl.mode === 'checkbox'){\n\n                baseSortControl.selected = !baseSortControl.selected;\n\n                this.checkboxes.forEach(cb => {\n\n                    if(cb.isEqualTo(baseSortControl)){\n                        cb.selected = baseSortControl.selected;\n                    }\n                });\n\n                this.handleCheckboxes();\n            }\n\n            if(baseSortControl.mode === 'radio'){\n\n                for (let radio of this.radios) {\n                    radio.selected = false;\n                }\n\n                baseSortControl.selected = true;\n\n                this.handleRadios();\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n        }\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BaseSortControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio mode controls\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        let atLeastOneNotSelectedCheckbox = false;\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                sortOptions = sortOptions.concat(checkbox.getSortOptions());\n            }\n            else{\n                atLeastOneNotSelectedCheckbox = true;\n            }\n        }\n\n        if(atLeastOneNotSelectedCheckbox){\n            sortOptions = sortOptions.concat([\n                {\n                    path: 'default'\n                }\n            ]);\n        }\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            sortOptions = sortOptions.concat(latestSelectedRadio.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => cb.id && cb.selected ? cb.id + '=1' : '').filter(str => str !== '');\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const combined = cbArr.concat(radioArr);\n        const unique = Array.from(new Set(combined));\n        return unique.join('&');\n    }\n}\n\nexport default ButtonsSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * radio buttons sort control\n *\n * Usage:\n * <label>\n *  <input\n *      type=\"radio\"\n *      data-jplist-control=\"radio-buttons-sort\"\n *      data-path=\".title\"           <!-- required -->\n *      data-group=\"group1\"          <!-- required -->\n *      data-order=\"asc\"             <!-- optional, asc (default) / desc -->\n *      data-type=\"text\"             <!-- optional, text (default) / number / datetime -->\n *      data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *      data-regex=\"\"                <!-- optional -->\n *      data-id=\"deep-link-name1\"    <!-- optional, used as deep link url and storage parameter -->\n *      name=\"sort1\"\n *      checked>\n *          Sort by title asc\n *  </input>\n * </label>\n *\n * Optional deep link: #deepLinkName1=1\n * selected value - 1\n * non selected - should not appear in deep link\n */\nclass RadioButtonsSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.radios.push(baseSortControl);\n        this.handleRadios();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            for (let radio of this.radios) {\n                radio.selected = false;\n            }\n\n            baseSortControl.selected = true;\n\n            this.handleRadios();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BaseSortControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio mode controls\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            sortOptions = sortOptions.concat(latestSelectedRadio.getSortOptions());\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const unique = Array.from(new Set(radioArr));\n        return unique.join('&');\n    }\n}\n\nexport default RadioButtonsSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * checkbox sort control\n *\n * Usage:\n * <label>\n *  <input\n *      type=\"checkbox\"\n *      data-jplist-control=\"checkbox-sort\"\n *      data-path=\".title\"           <!-- required -->\n *      data-group=\"group1\"          <!-- required -->\n *      data-order=\"asc\"             <!-- optional, asc (default) / desc -->\n *      data-type=\"text\"             <!-- optional, text (default) / number / datetime -->\n *      data-datetime-format=\"{month}/{day}/{year}\" <!-- optional -->\n *      data-regex=\"\"                <!-- optional -->\n *      data-id=\"deep-link-name1\"    <!-- optional, used as deep link url and storage parameter -->\n *      checked>\n *          Sort by title asc\n *  </input>\n * </label>\n * Optional deep link: #deepLinkName1=1\n * selected value - 1\n * non selected - 0\n */\nclass CheckboxSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        //get additional control properties\n        baseSortControl.selected = baseSortControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.checkboxes.push(baseSortControl);\n        this.handleCheckboxes();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            baseSortControl.selected = !baseSortControl.selected;\n\n            this.checkboxes.forEach(cb => {\n\n                if(cb.isEqualTo(baseSortControl)){\n                    cb.selected = baseSortControl.selected;\n                }\n            });\n\n            this.handleCheckboxes();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let sortOptions = [];\n\n        let atLeastOneNotSelectedCheckbox = false;\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                sortOptions = sortOptions.concat(checkbox.getSortOptions());\n            }\n            else{\n                atLeastOneNotSelectedCheckbox = true;\n            }\n        }\n\n        //any number of non selected checkboxes -> 1 default option\n        if(atLeastOneNotSelectedCheckbox){\n            sortOptions = sortOptions.concat([\n                {\n                    path: 'default'\n                }\n            ]);\n        }\n\n        return sortOptions;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n\n        const unique = Array.from(new Set(cbArr));\n        return unique.join('&');\n    }\n}\n\nexport default CheckboxSortControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\nimport BaseSortControl from '../../base/controls/sort/base-sort.control';\n\n/**\n * select sort control\n *  <select\n *        data-jplist-control=\"select-sort\"\n *        data-group=\"group1\"\n *        data-name=\"name1\"\n *        data-id=\"deep-link-name1\">  <!-- optional, used as deep link url and storage parameter -->\n *\n *        <option\n *          data-path=\"default\"\n *          value=\"0\"\n *          selected>Sort by</option>\n *\n *        <option\n *          value=\"1\"\n *          data-path=\".title\"\n *          data-order=\"asc\"\n *          data-type=\"text\">Title A-Z</option>\n *\n *        <option\n *          value=\"2\"\n *          data-path=\".title\"\n *          data-order=\"desc\"\n *          data-type=\"text\">Title Z-A</option>\n *    </select>\n *\n *    option may have the following attributes:\n *    ------------------------------------------\n *    data-path - required CSS path selector\n *    data-order - optional, asc (default) / desc\n *    data-type=\"text\" - optional, text (default) / number / datetime\n *    data-datetime-format=\"{month}/{day}/{year}\" - optional datetime format\n *    data-regex -  optional ignore regex\n */\nclass SelectSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.options = [];\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        const baseSortControl = super.addControl(control);\n\n        let options = baseSortControl.element.querySelectorAll('option');\n\n        for(let option of options){\n\n            option.setAttribute('data-name', this.name);\n            option.setAttribute('data-group', this.group);\n\n            if(!this.options.find(opt => opt.element.value === option.value)){\n                this.options.push(new BaseSortControl(option));\n            }\n        }\n\n        this.selected = baseSortControl.element.value;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            this.id = baseSortControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n                baseSortControl.element.value = deepLinkParam.value;\n                this.selected = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseSortControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            this.selected = e.target.value;\n\n            for(let select of this.controls){\n                select.element.value = this.selected;\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseSortControl);\n            }\n        });\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(selected){\n            return selected.getSortOptions();\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(this.id){\n            return this.id + '=' + selected.element.value;\n        }\n\n        return '';\n    }\n}\n\nexport default SelectSortControl;","import './base-dropdown.control.css';\n\n/**\n * base dropdown control\n */\nclass BaseDropdownControl{\n\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n\n        if(element) {\n\n            this.element = element;\n\n            if(!this.element) return;\n\n            //dropdown panel elements defined by data-type=\"panel\" data attribute; can be multiple;\n            this.panels = this.element.querySelectorAll('[data-type=\"panel\"]');\n            this.element.openedClass = (this.element.getAttribute('data-opened-class') || 'jplist-dd-opened').trim();\n\n            //keep panels initial html\n            for(let panel of this.panels){\n                panel.initialContent = panel.innerHTML;\n                panel.element = element;\n            }\n\n            //dropdown content elements defined by data-type=\"content\" data attribute; can be multiple;\n            this.contents = this.element.querySelectorAll('[data-type=\"content\"]');\n\n            //handle panels onclick event\n            this.handlePanelsClick();\n        }\n    }\n\n    /**\n     * handle panels onclick event\n     */\n    handlePanelsClick(){\n\n        if(!this.panels || this.panels.length <= 0) return;\n\n        for(let panel of this.panels){\n\n            /**\n             * on panel click\n             */\n            panel.addEventListener('click', e => {\n\n                //e.stopPropagation();\n\n                let atLeastOnePanelIsOpened = false;\n\n                for(let dropdownContent of this.contents){\n\n                    dropdownContent.classList.toggle(panel.element.openedClass);\n\n                    if(dropdownContent.classList.contains(panel.element.openedClass)){\n                        atLeastOnePanelIsOpened = true;\n                    }\n                }\n\n                if(atLeastOnePanelIsOpened){\n                    panel.classList.add(panel.element.openedClass);\n                    panel.element.classList.add(panel.element.openedClass);\n                }\n                else{\n                    panel.classList.remove(panel.element.openedClass);\n                    panel.element.classList.remove(panel.element.openedClass);\n                }\n            });\n        }\n\n        /**\n         * close dropdowns on body click\n         */\n        document.addEventListener('click', e => {\n\n            if (!this.element.contains(e.target)) { // or use: event.target.closest(selector) === null\n\n                this.close();\n            }\n        });\n    }\n\n    /**\n     * set panels content\n     * @param {string} content\n     */\n    setPanelsContent(content){\n\n        for(let panel of this.panels){\n            panel.innerHTML = content;\n        }\n    }\n\n    /**\n     * restore panels content\n     */\n    restorePanelsContent(){\n\n        for(let panel of this.panels){\n\n            if(panel.initialContent) {\n                panel.innerHTML = panel.initialContent;\n            }\n        }\n    }\n\n    /**\n     * close dropdown\n     */\n    close(){\n        for(let dropdownContent of this.contents){\n\n            dropdownContent.classList.remove(this.panels[0].element.openedClass);\n        }\n\n        for(let panel of this.panels){\n            panel.classList.remove(panel.element.openedClass);\n            panel.element.classList.remove(panel.element.openedClass);\n        }\n    }\n}\n\nexport default BaseDropdownControl;","import BaseSortControlsGroup from '../../base/groups/sort/base-sort-controls-group';\nimport BaseSortControl from '../../base/controls/sort/base-sort.control';\nimport BaseDropdownControl from '../../base/controls/dropdown/base-dropdown.control';\n\n/**\n * dropdown sort control\n */\nclass DropdownSortControl extends BaseSortControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.selected = null;\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseSortControl} control\n     */\n    addControl(control){\n\n        //a dropdown has the following custom properties:\n        //  -- dropdown - custom dropdown behaviour, styles, classes\n        //  -- buttons - the list of dropdown buttons, each of them is BaseSortControl\n        const baseSortControl = super.addControl(control);\n\n        //generate dropdown instance for the given control;\n        //this instance adds dropdown classes, styles and behaviour\n        baseSortControl.dropdown = new BaseDropdownControl(control.element);\n        baseSortControl.buttons = [];\n\n        //each button inside dropdown is a separate sort control that defined by data-path attribute;\n        //they are stored in baseSortControl.buttons array\n        let buttons = baseSortControl.element.querySelectorAll('[data-path]');\n\n        for(let button of buttons){\n\n            //all buttons inherits data-name and data-group attributes of the root dropdown\n            button.setAttribute('data-name', this.name);\n            button.setAttribute('data-group', this.group);\n            button.setAttribute('data-jump', baseSortControl.jump);\n\n            let btnSortControl = new BaseSortControl(button);\n\n            //save newly created button in the baseSortControl.buttons array\n            baseSortControl.buttons.push(btnSortControl);\n\n            /**\n             * on control button click -> update the selected control\n             */\n            btnSortControl.element.addEventListener('click', e => {\n\n                e.preventDefault();\n\n                //clicked button should be the selected one\n                this.selected = btnSortControl;\n\n                this.setSelectedButton(baseSortControl);\n\n                for(let control of this.controls){\n                    if(control.dropdown){\n                        control.dropdown.close();\n                    }\n                }\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group, btnSortControl);\n                }\n            });\n        }\n\n        this.selected = DropdownSortControl.getSelectedButton(baseSortControl.buttons);\n        this.setSelectedButton(baseSortControl);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseSortControl.id){\n\n            this.id = baseSortControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseSortControl.id);\n\n            if(deepLinkParam){\n\n                const deepLinkBtn = baseSortControl.buttons.find(btn => {\n\n                    const btnValue = btn.element.getAttribute('data-value');\n                    return (deepLinkParam.value === btnValue) ? btn : null;\n                });\n\n                if(deepLinkBtn) {\n                    this.selected = deepLinkBtn;\n                    this.setSelectedButton(baseSortControl);\n                }\n            }\n        }\n    }\n\n    /**\n     * get sort options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getSortOptions(){\n\n        if(this.selected){\n            return this.selected.getSortOptions();\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        if(this.id && this.selected){\n            return this.id + '=' + this.selected.element.getAttribute('data-value') || '';\n        }\n\n        return '';\n    }\n\n    /**\n     * get selected button that has data-selected=\"true\" data attribute;\n     * if there is no data-selected attribute -> take the first button\n     * @param {Array.<BaseSortControl>} buttons\n     * @return {BaseSortControl|null}\n     */\n    static getSelectedButton(buttons){\n\n        if(buttons.length <= 0) return null;\n\n        for(let button of buttons){\n            if(button.element.getAttribute('data-selected') === 'true'){\n                return button;\n            }\n        }\n\n        return buttons[0];\n    }\n\n    /**\n     * set selected button\n     * @param {BaseSortControl} baseSortControl\n     */\n    setSelectedButton(baseSortControl){\n\n        for(let control of this.controls){\n\n            if(!control.dropdown) continue;\n\n            //verify that dropdown has such button\n            const dropdownBtn = baseSortControl.buttons.find(btn => this.selected.isEqualTo(btn));\n\n            if(dropdownBtn){\n\n                //update dropdown panels value\n                control.dropdown.setPanelsContent(dropdownBtn.element.textContent);\n            }\n        }\n    }\n}\n\nexport default DropdownSortControl;","import BaseControl from '../base.control';\n\n/**\n * base pagination control\n */\nclass BasePaginationControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * optional, 10 by default\n             * the max number of items per page\n             */\n            this.itemsPerPage = Number(element.getAttribute('data-items-per-page')) || 10;\n\n            /**\n             * optional, 0 by default\n             * the initial page\n             */\n            this.currentPage = Number(element.getAttribute('data-current-page')) || 0;\n\n            /**\n             * optional, 10 by default\n             * max number of visible pagination button\n             */\n            this.range = Number(element.getAttribute('data-range')) || 10;\n\n            /**\n             * CSS class that is used on disabled pagination buttons\n             * @type {string|string}\n             */\n            this.disabledClass = (element.getAttribute('data-disabled-class') || 'jplist-disabled').trim();\n\n            /**\n             * CSS class that is used on selected pagination buttons\n             * @type {string|string}\n             */\n            this.selectedClass = (element.getAttribute('data-selected-class') || 'jplist-selected').trim();\n        }\n    }\n\n    /**\n     * get pagination options\n     * @return {object} options\n     */\n    getPaginationOptions(){\n\n        return {\n            itemsPerPage: this.itemsPerPage,\n            currentPage: this.currentPage,\n            range: this.range\n        };\n    }\n}\n\nexport default BasePaginationControl;\n","import BaseControlsGroup from '../base-controls-group';\nimport BasePaginationControl from '../../controls/pagination/base-pagination.control';\n\n/**\n * represents a group of pagination controls with the same data-name and data-group attributes\n */\nclass BasePaginationControlsGroup extends BaseControlsGroup{\n\n    /**\n     * there can be only 1 pagination options object;\n     * in case of multiple -> get the latest\n     * @return {object|null} pagination options\n     */\n    getPaginationOptions(){\n\n        if(this.controls.length > 0){\n            return this.controls[this.controls.length - 1].getPaginationOptions();\n        }\n\n        return null;\n    }\n\n    /**\n     * update controls according to the pagination options calculated using PaginationAction class;\n     * @param {PaginationAction} paginationOptions\n     */\n    setPaginationOptions(paginationOptions){}\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BasePaginationControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const basePaginationControl = new BasePaginationControl(control.element);\n\n        this.controls.push(basePaginationControl);\n\n        return basePaginationControl;\n    }\n}\n\nexport default BasePaginationControlsGroup;\n","import BasePaginationControlsGroup from '../base/groups/pagination/base-pagination-controls-group';\nimport BaseDropdownControl from '../base/controls/dropdown/base-dropdown.control';\n\n/**\n * pagination control\n */\nclass PaginationControl extends BasePaginationControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.currentPage = 0;\n        this.itemsPerPage = 0;\n        this.range = 0;\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePaginationControl} control\n     */\n    addControl(control){\n\n        const basePaginationControl = super.addControl(control);\n\n        //update properties - we take them from the latest pagination control in the group\n        this.currentPage = basePaginationControl.currentPage;\n        this.itemsPerPage = Number(basePaginationControl.itemsPerPage) || 0;\n        this.range = basePaginationControl.range;\n\n        //restore control state from the deep link value if needed\n        this.restoreFromDeepLink(basePaginationControl);\n\n        //this template is used for generating pagination buttons\n        basePaginationControl.pageButtonsHolder = basePaginationControl.element.querySelector('[data-type=\"pages\"]');\n\n        if(basePaginationControl.pageButtonsHolder){\n            basePaginationControl.btnTemplate = basePaginationControl.pageButtonsHolder.innerHTML;\n        }\n\n        //first, last, next and prev button\n        basePaginationControl.firstButtons = basePaginationControl.element.querySelectorAll('[data-type=\"first\"]');\n        basePaginationControl.lastButtons = basePaginationControl.element.querySelectorAll('[data-type=\"last\"]');\n        basePaginationControl.prevButtons = basePaginationControl.element.querySelectorAll('[data-type=\"prev\"]');\n        basePaginationControl.nextButtons = basePaginationControl.element.querySelectorAll('[data-type=\"next\"]');\n\n        //event handlers\n        PaginationControl.bindEventHandler(basePaginationControl.firstButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n        PaginationControl.bindEventHandler(basePaginationControl.lastButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n        PaginationControl.bindEventHandler(basePaginationControl.prevButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n        PaginationControl.bindEventHandler(basePaginationControl.nextButtons, 'click', this.pageButtonClick.bind(this), basePaginationControl);\n\n        //items per page select\n        basePaginationControl.itemsPerPageSelects = Array.from(basePaginationControl.element.querySelectorAll('[data-type=\"items-per-page\"]'));\n        this.updateItemsPerPageSelect(basePaginationControl.itemsPerPageSelects);\n\n        //items per page custom drop downs\n        basePaginationControl.itemsPerPageDD = Array.from(basePaginationControl.element.querySelectorAll('[data-type=\"items-per-page-dd\"]'));\n        this.initCustomDropdowns(basePaginationControl);\n\n        PaginationControl.bindEventHandler(basePaginationControl.itemsPerPageSelects, 'change', this.selectChange.bind(this), basePaginationControl);\n\n        //information labels\n        basePaginationControl.labels = basePaginationControl.element.querySelectorAll('[data-type=\"info\"]');\n\n        if(basePaginationControl.labels) {\n            for (let label of basePaginationControl.labels) {\n                label.template = label.innerHTML;\n            }\n        }\n    }\n\n    /**\n     * update items per page value of select group\n     * @param {Array.<HTMLElement>} selects\n     */\n    updateItemsPerPageSelect(selects){\n\n        for(let select of selects){\n\n            const option = Array.from(select.options).find(option => option.value === this.itemsPerPage.toString());\n\n            if(option) {\n                select.value = Number(this.itemsPerPage) || 0;\n            }\n            else{\n                select.value = 0;\n            }\n        }\n    }\n\n    /**\n     * init custom dropdowns\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    initCustomDropdowns(basePaginationControl){\n\n        //@param {HTMLCollection} itemsPerPageDD\n        const itemsPerPageDD = basePaginationControl.itemsPerPageDD;\n\n        if(!itemsPerPageDD || itemsPerPageDD.length <=0) return;\n\n        for(let dd of itemsPerPageDD){\n\n            //create dropdown instance for each dd HTML structure;\n            //this instance adds dropdown classes, styles and behaviour\n            dd.dropdown = new BaseDropdownControl(dd);\n\n            //all dropdown buttons are keeps as buttons property\n            dd.buttons = Array.from(dd.querySelectorAll('[data-value]'));\n\n            for(let button of dd.buttons){\n\n                button.addEventListener('click', (e) => {\n\n                    e.preventDefault();\n\n                    this.itemsPerPage = Number(button.getAttribute('data-value')) || 0;\n\n                    //set selected button in all dropdowns for the current this.itemsPerPage value\n                    this.setSelectedButton();\n\n                    dd.dropdown.close();\n\n                    if(window.jplist) {\n\n                        window.jplist.refresh(this.group, basePaginationControl);\n                    }\n                });\n            }\n        }\n\n        //set selected button in all dropdowns for the current this.itemsPerPage value\n        this.setSelectedButton();\n    }\n\n    // --------------------- BUTTONS ---------------------\n\n    /**\n     * set selected button in all dropdowns for the current this.itemsPerPage value\n     */\n    setSelectedButton(){\n\n        for(let control of this.controls){\n\n            if(!control.itemsPerPageDD) continue;\n\n            for(let dd of control.itemsPerPageDD){\n\n                if(!dd.buttons) continue;\n\n                let selectedButton = dd.buttons.find(button => {\n\n                    const btnValue = Number(button.getAttribute('data-value')) || 0;\n                    return btnValue === this.itemsPerPage;\n                });\n\n                if(!selectedButton){\n\n                    selectedButton = dd.buttons.find(button => {\n                        const btnValue = Number(button.getAttribute('data-value')) || 0;\n                        return btnValue === 0;\n                    });\n                }\n\n                if(selectedButton){\n\n                    dd.dropdown.setPanelsContent(selectedButton.textContent);\n                }\n            }\n        }\n    }\n\n    // --------------------- OPTIONS ---------------------\n\n    /**\n     * there can be only 1 pagination options object;\n     * in case of multiple -> get the latest\n     * @return {object} pagination options\n     */\n    getPaginationOptions(){\n\n        return {\n            itemsPerPage: this.itemsPerPage,\n            currentPage: this.currentPage,\n            range: this.range\n        };\n    }\n\n    /**\n     * update controls according to the pagination options calculated using PaginationAction class;\n     * @param {PaginationAction} paginationOptions\n     */\n    setPaginationOptions(paginationOptions){\n\n        if(!paginationOptions) return;\n\n        //update properties\n        this.currentPage = paginationOptions.currentPage;\n        this.itemsPerPage = paginationOptions.itemsPerPage;\n\n        for(let control of this.controls){\n\n            if(!control.btnTemplate || !control.pageButtonsHolder) continue;\n\n            //remove all old buttons\n            while (control.pageButtonsHolder.firstChild) {\n                control.pageButtonsHolder.removeChild(control.pageButtonsHolder.firstChild);\n            }\n\n            //generate new buttons\n            for (let i = paginationOptions.rangeStart; i <= paginationOptions.rangeEnd; i++) {\n\n                //update button text macros and button attributes\n                const div = document.createElement('div');\n                div.innerHTML = control.btnTemplate.replace(new RegExp('{pageNumber}', 'g'), (i+1)).trim();\n                const pageButton = div.firstChild;\n\n                let btn = pageButton.querySelector('[data-type=\"page\"]');\n                if(!btn){\n                    btn = pageButton;\n                }\n\n                btn.setAttribute('data-page', i.toString());\n\n                if(i === this.currentPage){\n\n                    btn.classList.add(control.selectedClass);\n                    btn.setAttribute('data-selected', 'true');\n                }\n\n                //on page button click event handler\n                btn.addEventListener('click', (e) => { this.pageButtonClick(e, btn, control); });\n\n                //add button to the buttons holder\n                control.pageButtonsHolder.appendChild(pageButton);\n            }\n\n            //update data-page attribute of first, last, prev and next buttons\n            PaginationControl.setPageAttr(control.firstButtons, 0, this.currentPage !== 0, control.disabledClass);\n\n            PaginationControl.setPageAttr(control.lastButtons,\n                paginationOptions.pagesNumber - 1,\n                this.currentPage !== paginationOptions.pagesNumber - 1,\n                control.disabledClass);\n\n            PaginationControl.setPageAttr(control.prevButtons,\n                paginationOptions.prevPage,\n                this.currentPage !== 0,\n                control.disabledClass);\n\n            PaginationControl.setPageAttr(control.nextButtons,\n                paginationOptions.nextPage,\n                this.currentPage !== paginationOptions.pagesNumber - 1,\n                control.disabledClass);\n\n            const infos = [\n                {key: '{pageNumber}', value: paginationOptions.currentPage + 1},\n                {key: '{pagesNumber}', value: paginationOptions.pagesNumber},\n                {key: '{startItem}', value: paginationOptions.start + 1},\n                {key: '{endItem}', value: paginationOptions.end},\n                {key: '{itemsNumber}', value: paginationOptions.itemsNumber}\n            ];\n\n            //update information labels\n            if(control.labels) {\n                for (let label of control.labels) {\n\n                    if(!label.template) continue;\n\n                    let html = label.template;\n\n                    for(let info of infos){\n                        html = html.replace(new RegExp(info.key, 'g'), info.value);\n                    }\n\n                    label.innerHTML = html;\n                }\n            }\n\n            //update whole control classes\n            const classesToRemove = (Array.from(control.element.classList)).filter(className => className.startsWith('jplist-pages-number-') || className.startsWith('jplist-items-number-'));\n\n            for(let className of classesToRemove){\n                control.element.classList.remove(className);\n            }\n\n            control.element.classList.add('jplist-pages-number-' + paginationOptions.pagesNumber);\n            control.element.classList.add('jplist-items-number-' + paginationOptions.itemsNumber);\n        }\n    }\n\n    // --------------------- EVENT HANDLERS ---------------------\n\n    /**\n     * page, first, last, prev and next button onclick handler\n     * @param {HTMLElement} btn\n     * @param {BasePaginationControl} control\n     */\n    pageButtonClick(e, btn, control){\n\n        if(e) {\n            e.preventDefault();\n        }\n\n        const pageNumber = btn ? btn.getAttribute('data-page') : e.target.getAttribute('data-page');\n        this.currentPage = Number(pageNumber) || 0;\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group, control);\n        }\n    }\n\n    /**\n     * on items per page select change\n     * @param {object} e\n     * @param {HTMLElement} select\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    selectChange(e, select, basePaginationControl){\n\n        e.preventDefault();\n\n        const itemsPerPage = Number(e.target.value);\n\n        if(!isNaN(itemsPerPage)){\n\n            this.itemsPerPage = itemsPerPage;\n\n            //update the selected values of all controls\n            for(let control of this.controls){\n                this.updateItemsPerPageSelect(control.itemsPerPageSelects);\n            }\n        }\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group, basePaginationControl);\n        }\n    }\n\n    // --------------------- DEEP LINK ---------------------\n\n    /**\n     * restore control state from the deep link value\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    restoreFromDeepLink(basePaginationControl){\n\n        if(basePaginationControl.id){\n\n            this.id = basePaginationControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === basePaginationControl.id);\n\n            if(deepLinkParam){\n\n                const parts = deepLinkParam.value.split('-');\n\n                if(parts.length !== 2) return;\n\n                const currentPage = Number(parts[0]);\n                const itemsPerPage = Number(parts[1]);\n\n                if(isNaN(currentPage) || isNaN(itemsPerPage)) return;\n\n                this.currentPage = currentPage;\n                this.itemsPerPage = itemsPerPage;\n            }\n        }\n    }\n\n    /**\n     * by default control's deep link is empty\n     * @returns {string}\n     */\n    getDeepLink(){\n\n        if(this.id){\n            return this.id + '=' + this.currentPage + '-' + this.itemsPerPage;\n        }\n\n        return '';\n    }\n\n    // --------------------- HELPERS ---------------------\n\n    /**\n     * update page button attributes and styles of the elements collection\n     * @param {HTMLCollection} items\n     * @param {number} page\n     * @param {boolean} isEnabled\n     * @param {string} disabledClass\n     */\n    static setPageAttr(items, page, isEnabled, disabledClass){\n\n        if(!items) return;\n\n        for(let item of items){\n            item.setAttribute('data-page', page);\n\n            if(isEnabled){\n                item.classList.remove(disabledClass);\n            }\n            else{\n                item.classList.add(disabledClass);\n            }\n        }\n    }\n\n    /**\n     * bind event handler to the items collection\n     * @param {HTMLCollection} items\n     * @param {string} eventName\n     * @param {Function} func\n     * @param {BasePaginationControl} basePaginationControl\n     */\n    static bindEventHandler(items, eventName, func, basePaginationControl){\n\n        if(!items) return;\n\n        for(let item of items){\n            item.addEventListener(eventName, (e) => {func(e, item, basePaginationControl); });\n        }\n    }\n}\n\nexport default PaginationControl;","import BaseControl from '../base.control';\n\n/**\n * base text filter control\n */\nclass BaseTextFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * initial text value is used to handle multiple same control in different panels\n             * @type {string}\n             */\n            this.initialText = element.getAttribute('data-text') || element.value || '';\n\n            /**\n             * trimmed text value items filter by\n             * @type {string}\n             */\n            this._text = (element.getAttribute('data-text') || element.value || '').trim();\n\n            /**\n             * filter mode - contains (default), startsWith, endsWith, equal\n             * @type {string}\n             */\n            this.mode = (element.getAttribute('data-mode') || 'contains').trim();\n\n            /**\n             * optional ignore regex - used to ignore characters before sort\n             * @type {string}\n             */\n            this.regex = element.getAttribute('data-regex') || '';\n\n            /**\n             * optional \"OR\" logic property, used to combine different filter controls with \"OR\" logic instead of \"AND\"\n             * @type {string|null}\n             */\n            this.or = element.getAttribute('data-or') || null;\n        }\n    }\n\n    /**\n     * text setter\n     * @param {string} value\n     */\n    set text(value){\n\n        this.initialText = value || '';\n        this._text = (value || '').trim();\n    }\n\n    /**\n     * text getter\n     * @return {string}\n     */\n    get text(){\n\n        return this._text;\n    }\n\n\n    /**\n     * get text filter options used in FilterAction.textFilter method\n     * @return {Array.<{object}>} options\n     */\n    getTextFilterOptions(){\n\n        return {\n            path: this.path,\n            text: this.text,\n            mode: this.mode,\n            ignoreRegex: this.regex,\n            or: this.or\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control;\n     * the values could be different\n     * @param {BaseTextFilterControl} control\n     * @param {boolean} includeValue\n     * @return {boolean}\n     */\n    isEqualTo(control, includeValue = true){\n\n        let isEqual = this.path === control.path &&\n            this.mode === control.mode &&\n            this.regex === control.regex;\n\n        if(includeValue){\n            isEqual = isEqual && this.text === control.text;\n        }\n\n        return isEqual;\n    }\n}\n\nexport default BaseTextFilterControl;","import BaseControlsGroup from '../base-controls-group';\nimport BaseTextFilterControl from '../../controls/filter/base-text-filter.control';\n\n/**\n * represents a group of text filter controls with the same data-name and data-group attributes\n */\nclass BaseTextFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} text filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getTextFilterOptions());\n        }\n\n        return options;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseTextFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseTextFilterControl = new BaseTextFilterControl(control.element);\n\n        this.controls.push(baseTextFilterControl);\n\n        return baseTextFilterControl;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        const dl = this.controls.map(control => control.id && control.text.trim() !== '' ? (control.id + '=' + control.text.trim()) : '').filter(str => str !== '');\n\n        const unique = Array.from(new Set(dl));\n        return unique.join('&');\n    }\n}\n\nexport default BaseTextFilterControlsGroup;\n","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\n\n/**\n * text box filter control\n */\nclass TextboxFilterControl extends BaseTextFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseTextFilterControl} control\n     */\n    addControl(control){\n\n        const baseTextFilterControl = super.addControl(control);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseTextFilterControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseTextFilterControl.id);\n\n            if(deepLinkParam){\n                baseTextFilterControl.text = deepLinkParam.value;\n                baseTextFilterControl.element.value = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control event\n         */\n        baseTextFilterControl.element.addEventListener('keyup', e => {\n\n            e.preventDefault();\n\n            baseTextFilterControl.text = e.target.value;\n\n            this.textChanged(baseTextFilterControl);\n        });\n\n        //handle clear button\n        baseTextFilterControl.clearButtonID = (baseTextFilterControl.element.getAttribute('data-clear-btn-id') || '').trim();\n\n        if(baseTextFilterControl.clearButtonID){\n\n            const clearBtn = document.getElementById(baseTextFilterControl.clearButtonID);\n\n            if(clearBtn){\n\n                /**\n                 * on clear button click\n                 */\n                clearBtn.addEventListener('click', e => {\n\n                    e.preventDefault();\n\n                    baseTextFilterControl.text = '';\n\n                    this.textChanged(baseTextFilterControl);\n                });\n            }\n        }\n    }\n\n    /**\n     * on text change\n     */\n    textChanged(baseTextFilterControl){\n\n        this.controls.forEach(control => {\n\n            if(control.isEqualTo(baseTextFilterControl, false)){\n\n                control.element.value = baseTextFilterControl.initialText;\n                control.text = baseTextFilterControl.initialText;\n            }\n        });\n\n        if(window.jplist) {\n\n            window.jplist.refresh(this.group, baseTextFilterControl);\n        }\n    }\n\n}\n\nexport default TextboxFilterControl;","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * checkbox mixin\n * used for multiple inheritance\n * usage example:\n * class CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst CheckboxMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseControl = super.addControl(control);\n\n        //get additional control properties\n        baseControl.selected = baseControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseControl.id);\n\n            if(deepLinkParam){\n                baseControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.checkboxes.push(baseControl);\n        this.handleCheckboxes();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            baseControl.selected = !baseControl.selected;\n\n            this.checkboxes.forEach(cb => {\n\n                if(cb.isEqualTo(baseControl)){\n                    cb.selected = baseControl.selected;\n                }\n            });\n\n            this.handleCheckboxes();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n            if(cb.id && cb.selected){\n                return cb.id + '=1';\n            }\n            return '';\n        }).filter(str => str !== '');\n        \n        const unique = Array.from(new Set(cbArr));\n        return unique.join('&');\n    }\n};\n\nexport default CheckboxMixin;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport CheckboxMixin from '../../../base/groups/mixins/checkbox.mixin';\n\n/**\n * checkbox text filter control\n */\nclass CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getTextFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default CheckboxTextFilterControl;","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * radio buttons mixin\n * used for multiple inheritance\n * usage example:\n * class CheckboxTextFilterControl extends CheckboxMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst RadioButtonsMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseControl = super.addControl(control);\n\n        //get additional control properties\n        baseControl.selected = baseControl.element.checked;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseControl.id);\n\n            if(deepLinkParam){\n                baseControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        this.radios.push(baseControl);\n        this.handleRadios();\n\n        /**\n         * on control change -> update the selected control\n         */\n        baseControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            for (let radio of this.radios) {\n                radio.selected = false;\n            }\n\n            baseControl.selected = true;\n\n            this.handleRadios();\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseControl);\n            }\n        });\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BasePathFilterControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio buttons\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n        const unique = Array.from(new Set(radioArr));\n        return unique.join('&');\n    }\n};\n\nexport default RadioButtonsMixin;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport RadioButtonsMixin from '../../../base/groups/mixins/radio-buttons.mixin';\n\n/**\n * radio buttons text filter control\n */\nclass RadioButtonsTextFilterControl extends RadioButtonsMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getTextFilterOptions());\n        }\n\n        return options;\n    }\n}\n\nexport default RadioButtonsTextFilterControl;","const SELECTED_CLASS = 'jplist-selected';\n\n/**\n * buttons mixin\n * used for multiple inheritance\n * usage example:\n * class ButtonsTextFilterControl extends ButtonsMixin(BaseTextFilterControlsGroup)\n * @param {class} superclass\n * @return {class}\n */\nconst ButtonsMixin = superclass => class extends superclass {\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.checkboxes = [];\n        this.radios = [];\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const baseButtonControl = super.addControl(control);\n\n        //get additional control properties\n        baseButtonControl.selected = baseButtonControl.element.getAttribute('data-selected') === 'true';\n        baseButtonControl.mode = baseButtonControl.element.getAttribute('data-mode') || 'radio';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(baseButtonControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === baseButtonControl.id);\n\n            if(deepLinkParam){\n                baseButtonControl.selected = deepLinkParam.value === '1';\n            }\n        }\n\n        if(baseButtonControl.mode === 'radio'){\n\n            this.radios.push(baseButtonControl);\n            this.handleRadios();\n        }\n\n        if(baseButtonControl.mode === 'checkbox'){\n\n            this.checkboxes.push(baseButtonControl);\n            this.handleCheckboxes();\n        }\n\n        /**\n         * on control click -> change the selected control\n         */\n        baseButtonControl.element.addEventListener('click', e => {\n\n            e.preventDefault();\n\n            if(baseButtonControl.mode === 'checkbox'){\n\n                baseButtonControl.selected = !baseButtonControl.selected;\n\n                this.checkboxes.forEach(cb => {\n\n                    if(cb.isEqualTo(baseButtonControl)){\n                        cb.selected = baseButtonControl.selected;\n                    }\n                });\n\n                this.handleCheckboxes();\n            }\n\n            if(baseButtonControl.mode === 'radio'){\n\n                for (let radio of this.radios) {\n                    radio.selected = false;\n                }\n\n                baseButtonControl.selected = true;\n\n                this.handleRadios();\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, baseButtonControl);\n            }\n        });\n    }\n\n    /**\n     * handle checkbox mode controls\n     */\n    handleCheckboxes(){\n\n        for(let cb of this.checkboxes){\n\n            if(cb.selected){\n                cb.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                cb.element.classList.remove(SELECTED_CLASS);\n            }\n\n            cb.element.checked = cb.selected;\n        }\n    }\n\n    /**\n     * get the latest selected radio\n     * @return {BasePathFilterControl} latestSelectedRadio\n     */\n    getLastSelectedRadio(){\n\n        let latestSelectedRadio = null;\n\n        //find the latest selected radio\n        for (let radio of this.radios) {\n\n            if (radio.selected) {\n                latestSelectedRadio = radio;\n            }\n        }\n\n        return latestSelectedRadio;\n    }\n\n    /**\n     * handle radio buttons\n     */\n    handleRadios(){\n\n        if(this.radios.length > 0) {\n\n            let latestSelectedRadio = this.getLastSelectedRadio();\n\n            //remove selected from all radios\n            for (let radio of this.radios) {\n\n                radio.selected = false;\n                radio.element.classList.remove(SELECTED_CLASS);\n            }\n\n            if(latestSelectedRadio) {\n\n                this.radios.forEach(radio => {\n\n                    if(radio.isEqualTo(latestSelectedRadio)){\n                        radio.selected = true;\n                        radio.element.checked = true;\n                        radio.element.classList.add(SELECTED_CLASS);\n                    }\n                });\n            }\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const cbArr = this.checkboxes.map(cb => {\n\n            if(cb.id){\n                return cb.selected ? cb.id + '=1' : cb.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n\n        const radioArr = this.radios.map(radio => radio.id && radio.selected ? radio.id + '=1' : '').filter(str => str !== '');\n\n        const combined = cbArr.concat(radioArr);\n        const unique = Array.from(new Set(combined));\n        return unique.join('&');\n    }\n};\n\nexport default ButtonsMixin;","import BaseTextFilterControlsGroup from '../../../base/groups/filter/base-text-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons text filter control\n */\nclass ButtonsTextFilterControl extends ButtonsMixin(BaseTextFilterControlsGroup){\n\n    /**\n     * get text filter options from all controls in the group\n     * @return {Array.<object>} text filter options\n     */\n    getTextFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getTextFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getTextFilterOptions());\n            }\n        }\n\n        return options;\n    }\n\n}\n\nexport default ButtonsTextFilterControl;","import BaseControl from '../base.control';\n\n/**\n * base path filter control\n */\nclass BasePathFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser default order (no sort); if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            /**\n             * defines if path is inverted; if true, the path filter returns all items that DON'T contain the specified path\n             * @type {string}\n             */\n            this.isInverted = (element.getAttribute('data-inverted') || '').toLowerCase().trim() === 'true';\n\n            /**\n             * optional \"OR\" logic property, used to combine different filter controls with \"OR\" logic instead of \"AND\"\n             * @type {string|null}\n             */\n            this.or = element.getAttribute('data-or') || null;\n        }\n    }\n\n    /**\n     * get path filter options used in FilterAction.pathFilter method\n     * @return {Array.<{object}>} options\n     */\n    getPathFilterOptions(){\n\n        return {\n            path: this.path,\n            isInverted: this.isInverted,\n            or: this.or\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control\n     * @param {BasePathFilterControl} control\n     * @return {boolean}\n     */\n    isEqualTo(control){\n        return this.path === control.path && this.isInverted === control.isInverted;\n    }\n}\n\nexport default BasePathFilterControl;","import BaseControlsGroup from '../base-controls-group';\nimport BasePathFilterControl from '../../controls/filter/base-path-filter.control';\n\n/**\n * represents a group of path filter controls with the same data-name and data-group attributes\n */\nclass BasePathFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BasePathFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const basePathFilterControl = new BasePathFilterControl(control.element);\n\n        this.controls.push(basePathFilterControl);\n\n        return basePathFilterControl;\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filer options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getPathFilterOptions());\n        }\n\n        return options;\n    }\n\n}\n\nexport default BasePathFilterControlsGroup;\n","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport BasePathFilterControl from '../../../base/controls/filter/base-path-filter.control';\n\n/**\n * select filter control\n */\nclass SelectFilterControl extends BasePathFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.options = [];\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        const selectFilterControl = super.addControl(control);\n\n        let options = selectFilterControl.element.querySelectorAll('option');\n\n        for(let option of options){\n\n            option.setAttribute('data-name', this.name);\n            option.setAttribute('data-group', this.group);\n\n            if(!this.options.find(opt => opt.element.value === option.value)){\n                this.options.push(new BasePathFilterControl(option));\n            }\n        }\n\n        this.selected = selectFilterControl.element.value;\n\n        //check if control contains a link and it is in the deep links parameters\n        if(selectFilterControl.id){\n\n            this.id = selectFilterControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === selectFilterControl.id);\n\n            if(deepLinkParam){\n                selectFilterControl.element.value = deepLinkParam.value;\n                this.selected = deepLinkParam.value;\n            }\n        }\n\n        /**\n         * on control event\n         */\n        selectFilterControl.element.addEventListener('change', e => {\n\n            e.preventDefault();\n\n            this.selected = e.target.value;\n\n            for(let select of this.controls){\n                select.element.value = this.selected;\n            }\n\n            if(window.jplist) {\n\n                window.jplist.refresh(this.group, selectFilterControl);\n            }\n        });\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} sortOptions\n     */\n    getPathFilterOptions(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(selected){\n            return [selected.getPathFilterOptions()];\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        let selected = this.options.find(opt => opt.element.value === this.selected);\n\n        if(this.id){\n            return this.id + '=' + selected.element.value;\n        }\n\n        return '';\n    }\n\n}\n\nexport default SelectFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport CheckboxMixin from '../../../base/groups/mixins/checkbox.mixin';\n\n/**\n * checkbox path filter control\n */\nclass CheckboxPathFilterControl extends CheckboxMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getPathFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default CheckboxPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport RadioButtonsMixin from '../../../base/groups/mixins/radio-buttons.mixin';\n\n/**\n * radio buttons path filter control\n */\nclass RadioButtonsPathFilterControl extends RadioButtonsMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getPathFilterOptions());\n        }\n\n        return options;\n    }\n}\n\nexport default RadioButtonsPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons path filter control\n */\nclass ButtonsPathFilterControl extends ButtonsMixin(BasePathFilterControlsGroup){\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getPathFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getPathFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getPathFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default ButtonsPathFilterControl;","import BasePathFilterControlsGroup from '../../../base/groups/filter/base-path-filter-controls-group';\nimport BasePathFilterControl from '../../../base/controls/filter/base-path-filter.control';\nimport BaseDropdownControl from '../../../base/controls/dropdown/base-dropdown.control';\n\n/**\n * dropdown filter control\n */\nclass DropdownFilterControl extends BasePathFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n        this.selected = '';\n        this.id = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BasePathFilterControl} control\n     */\n    addControl(control){\n\n        //a dropdown has the following custom properties:\n        //  -- dropdown - custom dropdown behaviour, styles, classes\n        //  -- buttons - the list of dropdown buttons, each of them is BaseSortControl\n        const basePathFilterControl = super.addControl(control);\n\n        //generate dropdown instance for the given control;\n        //this instance adds dropdown classes, styles and behaviour\n        basePathFilterControl.dropdown = new BaseDropdownControl(control.element);\n        basePathFilterControl.buttons = [];\n\n        //each button inside dropdown is a separate path filter control that defined by data-path attribute;\n        //they are stored in basePathFilterControl.buttons array\n        let buttons = basePathFilterControl.element.querySelectorAll('[data-path]');\n\n        for(let button of buttons){\n\n            button.setAttribute('data-name', this.name);\n            button.setAttribute('data-group', this.group);\n            button.setAttribute('data-jump', basePathFilterControl.jump);\n\n            let btnPathFilterControl = new BasePathFilterControl(button);\n\n            //save newly created button in the basePathFilterControl.buttons array\n            basePathFilterControl.buttons.push(btnPathFilterControl);\n\n            /**\n             * on control button click -> update the selected control\n             */\n            btnPathFilterControl.element.addEventListener('click', e => {\n\n                e.preventDefault();\n\n                //clicked button should be the selected one\n                this.selected = btnPathFilterControl;\n\n                this.setSelectedButton(basePathFilterControl);\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group, btnPathFilterControl);\n                }\n            });\n        }\n\n        this.selected = DropdownFilterControl.getSelectedButton(basePathFilterControl.buttons);\n        this.setSelectedButton(basePathFilterControl);\n\n        //check if control contains a link and it is in the deep links parameters\n        if(basePathFilterControl.id){\n\n            this.id = basePathFilterControl.id;\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === basePathFilterControl.id);\n\n            if(deepLinkParam){\n\n                const deepLinkBtn = basePathFilterControl.buttons.find(btn => {\n\n                    const btnValue = btn.element.getAttribute('data-value');\n                    return (deepLinkParam.value === btnValue) ? btn : null;\n                });\n\n                if(deepLinkBtn) {\n                    this.selected = deepLinkBtn;\n                    this.setSelectedButton(basePathFilterControl);\n                }\n            }\n        }\n    }\n\n    /**\n     * get path filter options from all controls in the group\n     * @return {Array.<object>} pathFilterOptions\n     */\n    getPathFilterOptions(){\n\n        if(this.selected){\n            return [this.selected.getPathFilterOptions()];\n        }\n\n        return [];\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        if(this.id && this.selected){\n            return this.id + '=' + this.selected.element.getAttribute('data-value') || '';\n        }\n\n        return '';\n    }\n\n    /**\n     * get selected button that has data-selected=\"true\" data attribute;\n     * if there is no data-selected attribute -> take the first button\n     * @param {Array.<BasePathFilterControl>} buttons\n     * @return {BasePathFilterControl|null}\n     */\n    static getSelectedButton(buttons){\n\n        if(buttons.length <= 0) return null;\n\n        for(let button of buttons){\n            if(button.element.getAttribute('data-selected') === 'true'){\n                return button;\n            }\n        }\n\n        return buttons[0];\n    }\n\n    /**\n     * set selected button\n     * @param {BasePathFilterControl} basePathFilterControl\n     */\n    setSelectedButton(basePathFilterControl){\n\n        for(let control of this.controls){\n\n            if(!control.dropdown) continue;\n\n            //verify that dropdown has such button\n            const dropdownBtn = basePathFilterControl.buttons.find(btn => this.selected.isEqualTo(btn));\n\n            if(dropdownBtn){\n\n                //update dropdown panels value\n                control.dropdown.setPanelsContent(dropdownBtn.element.textContent);\n            }\n\n            control.dropdown.close();\n        }\n    }\n\n}\n\nexport default DropdownFilterControl;","import BaseControl from '../base.control';\n\n/**\n * base range filter control\n */\nclass BaseRangeFilterControl extends BaseControl{\n\n    /**\n     * constructor\n     * @param {HTMLElement} element\n     */\n    constructor(element){\n        super(element);\n\n        if(element){\n\n            /**\n             * css selector or 'default' for the browser initial list; if path is empty -> the whole element\n             * @type {string}\n             */\n            this.path = (element.getAttribute('data-path') || '').trim();\n\n            const from = element.getAttribute('data-from');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.from = from === null ? -Infinity : Number(from);\n\n            if(isNaN(this.from)){\n                this.from = -Infinity;\n            }\n\n            const to = element.getAttribute('data-to');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.to = to === null ? Infinity : Number(to);\n\n            if(isNaN(this.to)){\n                this.to = Infinity;\n            }\n\n            const min = element.getAttribute('data-min');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.min = min === null ? this.from : Number(min);\n\n            if(isNaN(this.min)){\n                this.min = this.from;\n            }\n\n            const max = element.getAttribute('data-max');\n\n            /**\n             * min <= from <= (all numbers in the element) <= to <= max\n             * @type {number}\n             */\n            this.max = max === null ? this.to : Number(max);\n\n            if(isNaN(this.max)){\n                this.max = this.to;\n            }\n\n            const step = element.getAttribute('data-step');\n            \n            /**\n             * Step >= 1 (all numbers in the element)\n             * @type {number}\n             */\n            this.step = step === null ? 1 : Number(step);\n\n            if(isNaN(this.step)){\n                this.step = 1;\n            }\n\n            /**\n             * optional \"OR\" logic property, used to combine different filter controls with \"OR\" logic instead of \"AND\"\n             * @type {string|null}\n             */\n            this.or = element.getAttribute('data-or') || null;\n        }\n    }\n\n    /**\n     * get range filter options used in FilterAction.rangeFilter method\n     * @return {Array.<{object}>} options\n     */\n    getRangeFilterOptions(){\n\n        return {\n            path: this.path,\n            min: this.min,\n            from: this.from,\n            to: this.to,\n            max: this.max,\n            step: this.step,\n            or: this.or\n        };\n    }\n\n    /**\n     * check if current control has the same properties like the specified control\n     * @param {BaseRangeFilterControl} control\n     * @return {boolean}\n     */\n    isEqualTo(control){\n        return this.path === control.path &&\n                this.from === control.from &&\n                this.to === control.to &&\n                this.min === control.min &&\n                this.max === control.max &&\n                this.step === control.step;\n    }\n}\n\nexport default BaseRangeFilterControl;","import BaseControlsGroup from '../base-controls-group';\nimport BaseRangeFilterControl from '../../controls/filter/base-range-filter.control';\n\n/**\n * represents a group of range filter controls with the same data-name and data-group attributes\n */\nclass BaseRangeFilterControlsGroup extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseRangeFilterControl|null}\n     */\n    addControl(control){\n\n        if(control.name !== this.name || control.group !== this.group){\n            return null;\n        }\n\n        const baseRangeFilterControl = new BaseRangeFilterControl(control.element);\n\n        this.controls.push(baseRangeFilterControl);\n\n        return baseRangeFilterControl;\n    }\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} range filer options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n            options = options.concat(control.getRangeFilterOptions());\n        }\n\n        return options;\n    }\n\n}\n\nexport default BaseRangeFilterControlsGroup;\n","import BaseRangeFilterControlsGroup from '../../../base/groups/filter/base-range-filter-controls-group';\nimport ButtonsMixin from '../../../base/groups/mixins/buttons.mixin';\n\n/**\n * buttons range filter\n */\nclass ButtonsRangeFilter extends ButtonsMixin(BaseRangeFilterControlsGroup){\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        //get options from the latest selected radio if exists\n        let latestSelectedRadio = this.getLastSelectedRadio();\n\n        if(latestSelectedRadio){\n            options = options.concat(latestSelectedRadio.getRangeFilterOptions());\n        }\n\n        //add all selected checkboxes\n        for(let checkbox of this.checkboxes){\n\n            if(checkbox.selected) {\n                options = options.concat(checkbox.getRangeFilterOptions());\n            }\n        }\n\n        return options;\n    }\n}\n\nexport default ButtonsRangeFilter;","import './base-slider.control.css';\n\n/**\n * base slider control\n */\nclass BaseSliderControl{\n\n    /**\n     * control type defined in data-jplist-control attribute;\n     * for example, data-jplist-control=\"hidden-sort\" has type='hidden-sort'\n     * @param {HTMLElement} element\n     * @param {boolean} isVertical\n     * @param {number} min\n     * @param {number} value1 - initial value 1\n     * @param {number} value2 - initial value2\n     * @param {number} max\n     * @param {Function} callback\n     */\n    constructor(element, isVertical = false, min = 0, value1 = 0, value2 = 0, max = 0, step = 1, valInput1 = null, valInput2 = null, callback = (value1, value2) => {}){\n\n        if(element) {\n\n            this.element = element;\n            this.element.classList.add('jplist-slider');\n\n            if(!this.element) return;\n\n            this.isVertical = isVertical;\n            this.callback = callback;\n            this.min = min;\n            this.max = max;\n            this.step = step;\n\n            if(isVertical){\n                this.element.classList.add('jplist-slider-vertical');\n            }\n\n            //create and append the first holder\n            this.handler1 = document.createElement('span');\n            this.handler1.classList.add('jplist-slider-holder-1');\n            this.element.appendChild(this.handler1);\n\n            //create and append the range element\n            this.range = document.createElement('span');\n            this.range.classList.add('jplist-slider-range');\n            this.element.appendChild(this.range);\n\n            //initial value\n            this.handler1.left = 0;\n            this.handler1.top = 0;\n            this.handler1.value = this.getPreviewValue(0, min, max); //0\n\n            //create and append the second holder\n            this.handler2 = document.createElement('span');\n            this.handler2.classList.add('jplist-slider-holder-2');\n            this.element.appendChild(this.handler2);\n\n            //initial value\n            this.handler2.left = 0;\n            this.handler2.top = 0;\n            this.handler2.value = this.getPreviewValue(0, min, max); //0\n\n            this.dragging = null;\n\n            //slider input control\n            this.valueInput1 = valInput1;\n            this.valueInput2 = valInput2;\n\n            // Initialize value display elements\n            this.val1Elements = element.querySelectorAll('[data-type=\"value-1\"]');\n            this.val2Elements = element.querySelectorAll('[data-type=\"value-2\"]');\n\n            this.handler1.addEventListener('mousedown', this.start.bind(this));\n            this.handler2.addEventListener('mousedown', this.start.bind(this));\n            this.handler1.addEventListener('touchstart', this.start.bind(this));\n            this.handler2.addEventListener('touchstart', this.start.bind(this));\n\n            document.addEventListener('mousemove', this.render.bind(this));\n            document.addEventListener('touchmove', this.render.bind(this));\n            window.addEventListener('resize', this.resize.bind(this));\n\n            document.addEventListener('mouseup', this.stop.bind(this));\n            document.addEventListener('touchend', this.stop.bind(this));\n            document.body.addEventListener('mouseleave', this.stop.bind(this));\n\n            this.element.addEventListener('mousedown', this.jump.bind(this));\n\n            //slider input control jump\n            if (valInput1 && valInput2) {\n                this.valueInput1.addEventListener('keydown', this.inputJump.bind(this));\n                this.valueInput2.addEventListener('keydown', this.inputJump.bind(this));\n            }\n\n            //set initial values\n            this.setValues(value1, value2);\n\n            // Ensure min/max labels are applied on initialization\n            const minLabel = this.element.parentElement.getAttribute('data-min-label');\n            const maxLabel = this.element.parentElement.getAttribute('data-max-label');\n            \n            if (value1 === min && minLabel) {\n                this.element.parentElement.querySelectorAll('[data-type=\"value-1\"]').forEach(el => {\n                    el.textContent = minLabel;\n                });\n            }\n            \n            if (value2 === max && maxLabel) {\n                this.element.parentElement.querySelectorAll('[data-type=\"value-2\"]').forEach(el => {\n                    el.textContent = maxLabel;\n                });\n            }\n        }\n    }\n\n    /**\n     * set slider values from outside\n     * @param {number} value1\n     * @param {number} value2\n     * @param {boolean} sendCallback\n     */\n    setValues(value1, value2, sendCallback = true){\n\n        if(value2 < value1){\n            value2 = value1;\n        }\n\n        // Add or remove applied class based on new values\n        if (value1 === this.min && value2 === this.max) {\n            this.element.classList.remove('jplist-slider-applied');\n        } else {\n            this.element.classList.add('jplist-slider-applied');\n        }\n\n        const pos1 = this.getInnerValue(value1, this.min, this.max);\n        const pos2 = this.getInnerValue(value2, this.min, this.max);\n\n        // Update value display elements\n        const minLabel = this.element.parentElement.getAttribute('data-min-label');\n        const maxLabel = this.element.parentElement.getAttribute('data-max-label');\n        \n        this.element.parentElement.querySelectorAll('[data-type=\"value-1\"]').forEach(el => {\n            el.textContent = (value1 === this.min && minLabel) ? minLabel : Math.round(value1);\n        });\n        \n        this.element.parentElement.querySelectorAll('[data-type=\"value-2\"]').forEach(el => {\n            el.textContent = (value2 === this.max && maxLabel) ? maxLabel : Math.round(value2);\n        });\n\n        this.update({\n            x: pos2,\n            y: pos2\n        }, this.handler2, sendCallback);\n\n        this.update({\n            x: pos1,\n            y: pos1\n        }, this.handler1, sendCallback);\n    }\n\n    /**\n     * convert [0, slider-width] range to [min, max] range for the specified value\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} mappedValue\n     */\n    getPreviewValue(value, min, max){\n\n        const rect = this.element.getBoundingClientRect();\n        const size = this.isVertical? 'height': 'width';\n\n        const newStart = min;\n        const newEnd = max;\n        const originalStart = 0;\n        const originalEnd = rect[size];\n\n        //return Math.round((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\n        return Math.trunc((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\n    }\n\n    /**\n     * convert [min, max] range to [0, slider-width] range for the specified value\n     * @param {number} value\n     * @param {number} min\n     * @param {number} max\n     * @return {number} mappedValue\n     */\n    getInnerValue(value, min, max){\n\n        const rect = this.element.getBoundingClientRect();\n        const size = this.isVertical? 'height': 'width';\n\n        const newStart = 0;\n        const newEnd = rect[size];\n        const originalStart = min;\n        const originalEnd = max;\n\n        //return Math.round((newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart);\n        return (newEnd - newStart) * ((value - originalStart) / (originalEnd - originalStart)) + newStart;\n    }\n\n    /**\n     * jump to the specified point on the slider\n     * @param {Object} e\n     */\n    jump(e){\n        e.preventDefault();\n\n        let position = this.getHandlerPos(e);\n\n        if(this.isVertical){\n            this.dragging = Math.abs(position.y - this.handler1.top) < Math.abs(position.y - this.handler2.top) ? this.handler1 : this.handler2;\n        }\n        else{\n            this.dragging = Math.abs(position.x - this.handler1.left) < Math.abs(position.x - this.handler2.left) ? this.handler1 : this.handler2;\n        }\n\n        //render the updated state\n        this.render(e);\n    }\n\n    /**\n     * jump to the specified point on the slider with input\n     * @param {Object} e\n     */\n    inputJump(e) {\n\n        if (e.which === 13) {\n\n            let value1 = this.valueInput1.value ? this.valueInput1.value : this.handler1.value;\n            let value2 = this.valueInput2.value ? this.valueInput2.value : this.handler2.value;\n\n            if (this.valueInput1.value > this.handler2.value) {\n                value1 = this.valueInput1.value = this.handler2.value;\n            }\n            if (this.valueInput2.value < this.handler1.value) {\n                value2 = this.valueInput2.value = this.handler1.value;\n            }\n            \n            //convert value to position\n            const pos1 = this.getInnerValue(value1, this.min, this.max);\n            const pos2 = this.getInnerValue(value2, this.min, this.max);\n\n            this.update({\n                x: pos2,\n                y: pos2\n            }, this.handler2, true);\n\n            this.update({\n                x: pos1,\n                y: pos1\n            }, this.handler1, true);\n        }\n    }\n\n    /**\n     * update z-index of the active handler\n     */\n    setZIndex(){\n\n        const handler1ZIndex = window.getComputedStyle ? Number(document.defaultView.getComputedStyle(this.handler1, null).getPropertyValue('z-index')) || 200 : 200;\n        const handler2ZIndex = window.getComputedStyle ? Number(document.defaultView.getComputedStyle(this.handler2, null).getPropertyValue('z-index')) || 200 : 200;\n\n        if(handler1ZIndex === handler2ZIndex){\n            this.dragging.style['z-index'] = handler1ZIndex + 1;\n        }\n        else{\n            const max = Math.max(handler1ZIndex, handler2ZIndex);\n            const min = Math.min(handler1ZIndex, handler2ZIndex);\n\n            this.handler1.style['z-index'] = min;\n            this.handler2.style['z-index'] = min;\n            this.dragging.style['z-index'] = max;\n        }\n    }\n\n    /**\n     * start dragging\n     * @param {Object} e\n     */\n    start(e){\n        e.preventDefault();\n        e.stopPropagation();\n\n        this.dragging = e.target;\n\n        //update z-index of the active handler\n        this.setZIndex();\n\n        //render the updated state\n        this.render();\n    }\n\n    /**\n     * stop dragging\n     * @param {Object} e\n     */\n    stop(e){\n        //e.preventDefault();\n        \n        if (this.dragging) {\n            \n            // Apply the filter when dragging stops\n            if(this.callback){\n                this.callback(this.handler1.value, this.handler2.value);\n            }\n            this.dragging = null;\n        }\n    }\n\n    /**\n     * on window resize\n     * @param {Object} e\n     */\n    resize(e){\n\n        if(this.handler1 && this.handler2){\n\n            this.setValues(this.handler1.value, this.handler2.value);\n        }\n    }\n\n    /**\n     * render the updated state\n     */\n    render(e){\n        if(e && this.dragging){\n            // Update the position and internal values\n            this.update(this.getHandlerPos(e), this.dragging, false);\n            \n            const value1 = Math.round(this.handler1.value);\n            const value2 = Math.round(this.handler2.value);\n            \n            // Update value display elements within this slider only\n            const minLabel = this.element.parentElement.getAttribute('data-min-label');\n            const maxLabel = this.element.parentElement.getAttribute('data-max-label');\n            \n            this.element.parentElement.querySelectorAll('[data-type=\"value-1\"]').forEach(el => {\n                el.textContent = (value1 === this.min && minLabel) ? minLabel : value1;\n            });\n            \n            this.element.parentElement.querySelectorAll('[data-type=\"value-2\"]').forEach(el => {\n                el.textContent = (value2 === this.max && maxLabel) ? maxLabel : value2;\n            });\n\n            // Update input values if they exist\n            if (this.valueInput1) {\n                this.valueInput1.value = value1;\n            }\n            if (this.valueInput2) {\n                this.valueInput2.value = value2;\n            }\n        }\n    }\n\n    /**\n     * update position and styles\n     * @param {object} position\n     * @param {element} handler\n     * @param {boolean} sendCallback\n     */\n    update(position, handler, sendCallback = true){\n\n        if(handler){\n\n            const rect = this.element.getBoundingClientRect();\n\n            const size = this.isVertical? 'height': 'width';\n            const xy = this.isVertical? 'y': 'x';\n            const lefttop = this.isVertical? 'top': 'left';\n\n            if(position[xy] < 0){\n                position[xy] = 0;\n            }\n\n            if(position[xy] > rect[size]){\n                position[xy] = rect[size];\n            }\n\n            if(handler === this.handler1 && position[xy] >= this.handler2[lefttop]){\n                position[xy] = this.handler2[lefttop];\n            }\n\n            if(handler === this.handler2 && position[xy] <= this.handler1[lefttop]){\n                position[xy] = this.handler1[lefttop];\n            }\n\n            //save current value\n            handler[lefttop] = position[xy];\n            //const value = Math.round(position[xy] * 100 / rect[size]); //value in %\n            handler.value = this.getPreviewValue(position[xy], this.min, this.max);\n\n            //update the position with steps\n            if (this.step > 1) {\n                const stepValue = Math.ceil(handler.value / this.step) * this.step;\n                handler.value = stepValue > this.max ? this.max : stepValue;\n                const step = rect[size] / (this.max / this.step);\n    \n                position[xy] = Math.fround(position[xy] / step) * step;\n            }\n\n            handler.style[lefttop] = (position[xy]) + 'px';\n\n            //update range element\n            this.range.style[lefttop] = this.handler1[lefttop] + 'px';\n\n            const rangeHeight = this.handler2[lefttop] - this.handler1[lefttop];\n            this.range.style[size] = (rangeHeight >= 0 ? rangeHeight : 0) + 'px';\n\n            // Update display values regardless of dragging state\n            if (this.valueInput1 && this.valueInput2) {\n                if (handler === this.handler1) {\n                    this.valueInput1.value = Math.round(handler.value);\n                } else {\n                    this.valueInput2.value = Math.round(handler.value);\n                }\n            }\n\n            // Update value display elements\n            const value1 = Math.round(this.handler1.value);\n            const value2 = Math.round(this.handler2.value);\n            const minLabel = this.element.parentElement.getAttribute('data-min-label');\n            const maxLabel = this.element.parentElement.getAttribute('data-max-label');\n            \n            this.element.parentElement.querySelectorAll('[data-type=\"value-1\"]').forEach(el => {\n                el.textContent = (value1 === this.min && minLabel) ? minLabel : value1;\n            });\n            \n            this.element.parentElement.querySelectorAll('[data-type=\"value-2\"]').forEach(el => {\n                el.textContent = (value2 === this.max && maxLabel) ? maxLabel : value2;\n            });\n\n            //call callback function only if not dragging or if explicitly requested via sendCallback\n            if(this.callback && (sendCallback && !this.dragging)){\n                this.callback(this.handler1.value, this.handler2.value);\n            }\n\n            // Add or remove applied class based on slider state\n            if (this.isInitialState()) {\n                this.element.classList.remove('jplist-slider-applied');\n            } else {\n                this.element.classList.add('jplist-slider-applied');\n            }\n        }\n    }\n\n    /**\n     * check if slider is in its initial state\n     * @return {boolean}\n     */\n    isInitialState() {\n        return Math.round(this.handler1.value) === this.min && Math.round(this.handler2.value) === this.max;\n    }\n\n    /**\n     * subtraction of 2 vectors\n     * @param {Object} v1 - vector #1\n     * @param {Object} v2 - vector #2\n     */\n    static sub(v1, v2){\n\n        return {\n            x: v1.x - v2.x,\n            y: v1.y - v2.y\n        };\n    }\n\n    /**\n     * get handler position from mouse / tap position\n     * @param {object} e\n     * @return {object} handler position\n     */\n    getHandlerPos(e){\n\n        const rect = this.element.getBoundingClientRect();\n\n        const point = {\n            x: e.touches && e.touches.length > 0 ? e.touches[0].pageX : e.clientX,\n            y: e.touches && e.touches.length > 0 ? e.touches[0].pageY : e.clientY\n        };\n\n        const vector = {\n            x: rect.left,\n            y: rect.top\n        };\n\n        return BaseSliderControl.sub(point, vector);\n    }\n\n}\n\nexport default BaseSliderControl;","import BaseRangeFilterControlsGroup from '../../../base/groups/filter/base-range-filter-controls-group';\nimport BaseSliderControl from '../../../base/controls/slider/base-slider.control';\n\n/**\n * range slider filter\n */\nclass SliderRangeFilter extends BaseRangeFilterControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     */\n    addControl(control){\n\n        const rangeSliderFilterControl = super.addControl(control);\n\n        const sliderEl = control.element.querySelector('[data-type=\"slider\"]');\n        rangeSliderFilterControl.val1Elements = control.element.querySelectorAll('[data-type=\"value-1\"]');\n        rangeSliderFilterControl.val2Elements = control.element.querySelectorAll('[data-type=\"value-2\"]');\n        rangeSliderFilterControl.minElements = control.element.querySelectorAll('[data-type=\"min\"]');\n        rangeSliderFilterControl.maxElements = control.element.querySelectorAll('[data-type=\"max\"]');\n        const valInput1 = control.element.querySelector('[data-type=\"value-1-input\"]');\n        const valInput2 = control.element.querySelector('[data-type=\"value-2-input\"]');\n\n        rangeSliderFilterControl.minLabel = control.element.getAttribute('data-min-label');\n        rangeSliderFilterControl.maxLabel = control.element.getAttribute('data-max-label');\n\n        if(!sliderEl) return;\n\n        //control properties\n        const orientation = control.element.getAttribute('data-orientation') || 'horizontal'; //'vertical'\n\n        for(let el of rangeSliderFilterControl.minElements){\n            el.textContent = rangeSliderFilterControl.minLabel || rangeSliderFilterControl.min;\n        }\n\n        for(let el of rangeSliderFilterControl.maxElements){\n            el.textContent = rangeSliderFilterControl.maxLabel || rangeSliderFilterControl.max;\n        }\n\n        //check if control contains a link and it is in the deep links parameters\n        if(rangeSliderFilterControl.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === rangeSliderFilterControl.id);\n\n            if(deepLinkParam && deepLinkParam.value){\n                const parts = deepLinkParam.value.split('_');\n\n                if(parts.length === 2){\n\n                    rangeSliderFilterControl.from = Number(parts[0]) || 0;\n                    rangeSliderFilterControl.to = Number(parts[1]) || 0;\n                }\n            }\n        }\n\n        rangeSliderFilterControl.slider = new BaseSliderControl(\n            sliderEl,\n            orientation === 'vertical',\n            rangeSliderFilterControl.min,\n            rangeSliderFilterControl.from,\n            rangeSliderFilterControl.to,\n            rangeSliderFilterControl.max,\n            rangeSliderFilterControl.step,\n            valInput1, valInput2,\n            (value1, value2) => {\n                \n                //setup values for input\n                if (valInput1 && valInput2) {\n                    valInput1.value = Math.round(value1);\n                    valInput2.value = Math.round(value2);\n                }\n\n                for(let el of rangeSliderFilterControl.val1Elements){\n                    el.textContent = (value1 === rangeSliderFilterControl.min && rangeSliderFilterControl.minLabel) ? rangeSliderFilterControl.minLabel : Math.round(value1);\n                }\n\n                for(let el of rangeSliderFilterControl.val2Elements){\n                    el.textContent = (value2 === rangeSliderFilterControl.max && rangeSliderFilterControl.maxLabel) ? rangeSliderFilterControl.maxLabel : Math.round(value2);\n                }\n\n                for(let control of this.controls){\n\n                    if(!control.slider) continue;\n\n                    control.slider.setValues(value1, value2, false);\n                }\n\n                if(window.jplist) {\n\n                    window.jplist.refresh(this.group, rangeSliderFilterControl);\n                }\n        });\n    }\n\n    /**\n     * get range filter options from all controls in the group\n     * @return {Array.<object>} path filter options\n     */\n    getRangeFilterOptions(){\n\n        let options = [];\n\n        for(let control of this.controls){\n\n            if(!control.slider || !control.slider.handler1 || !control.slider.handler2) continue;\n\n            const controlOptions = control.getRangeFilterOptions();\n            controlOptions.from = control.slider.handler1.value;\n            controlOptions.to = control.slider.handler2.value;\n\n            options = options.concat(controlOptions);\n        }\n\n        return options;\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n\n        const arr = this.controls.map(control => {\n\n            if(!control.id || !control.slider || !control.slider.handler1 || !control.slider.handler2) return '';\n\n            return control.id + '=' + control.slider.handler1.value + '_' + control.slider.handler2.value;\n        }).filter(str => str !== '');\n\n        const unique = Array.from(new Set(arr));\n\n        return unique.join('&');\n\n    }\n}\n\nexport default SliderRangeFilter;","import BaseControlsGroup from '../base/groups/base-controls-group';\n\n/**\n * no results control\n * Example:\n * <div data-jplist-control=\"no-results\" data-group=\"group1\" name=\"no-results\">No Results Found</div>\n */\nclass NoResultsControl extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.element.addEventListener('jplist.state', (e) => {\n\n            if(!e.jplistState) return;\n\n            const itemsNumber = Number(e.jplistState.itemsNumber) || 0;\n            control.element.style.display = itemsNumber === 0 ? '' : 'none';\n\n        }, false);\n\n    }\n}\n\nexport default NoResultsControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\n\nconst SELECTED_CLASS = 'jplist-selected';\n\n/**\n * layout control\n */\nclass LayoutControl extends BaseControlsGroup{\n\n    /**\n     * constructor\n     * @param {string} group\n     * @param {string} name\n     * @param {Array.<BaseControl>=} controls\n     * @param {Map|null=} deepLinkParams - structure: [groupName, [{key, value}, ...]], ...\n     */\n    constructor(group, name, controls = [], deepLinkParams = null){\n        super(group, name, controls, deepLinkParams);\n\n        this.group = group;\n        this.name = name;\n\n        this.classNames = new Set();\n        this.selectedClassName = '';\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.groupClassName = control.element.getAttribute('data-class') || '';\n        control.selected = control.element.getAttribute('data-selected') === 'true';\n\n        //check if control contains a link and it is in the deep links parameters\n        if(control.id){\n\n            const deepLinkParam = this.deepLinkParams.find(param => param.key === control.id);\n\n            if(deepLinkParam){\n                control.selected = deepLinkParam.value === '1';\n            }\n            //else{\n                //control.selected = false;\n            //}\n        }\n\n        this.classNames.add(control.groupClassName);\n\n        /**\n         * on button click\n         */\n         control.element.addEventListener('click', (e) => {\n\n             e.preventDefault();\n\n             this.handleSelectedControls(control.groupClassName);\n\n             this.handleClasses();\n\n             if(window.jplist) {\n\n                 window.jplist.refresh(this.group, control);\n             }\n\n         }, false);\n\n        this.handleClasses();\n    }\n\n    /**\n     * add / remove buttons classes\n     */\n     handleClasses(){\n\n        const groups = document.querySelectorAll('[data-jplist-group=\"' + this.group + '\"]');\n\n        //remove classes from all groups\n        this.resetAllGroups(groups);\n\n        let selected = this.getLatestSelectedControl();\n\n        if(!selected) return;\n\n        this.handleSelectedControls(selected.groupClassName);\n\n        //add specified class name to each group\n        LayoutControl.addClassToGroups(selected.groupClassName, groups);\n    }\n\n    /**\n     * get the latest selected control\n     * @return {BaseControl} selected control\n     */\n     getLatestSelectedControl(){\n\n        let selected = null;\n\n        for(let control of this.controls){\n\n            if(control.selected){\n                selected = control;\n            }\n        }\n\n        if(!selected && this.controls.length > 0){\n            selected = this.controls[0];\n        }\n\n        return selected;\n    }\n\n    /**\n     * remove classes from all groups\n     * @param {NodeList} groups\n     */\n     resetAllGroups(groups){\n\n        for(let group of groups){\n\n            //remove all classes\n            for(let cn of this.classNames){\n                group.classList.remove(cn);\n            }\n        }\n    }\n\n    /**\n     * handle selected controls\n     * @param {string} selectedGroupClassName\n     */\n     handleSelectedControls(selectedGroupClassName){\n\n        for(let control of this.controls){\n\n            if(control.groupClassName === selectedGroupClassName){\n                control.selected = true;\n                control.element.classList.add(SELECTED_CLASS);\n            }\n            else{\n                control.selected = false;\n                control.element.classList.remove(SELECTED_CLASS);\n            }\n        }\n    }\n\n    /**\n     * add specified class name to each group\n     * @param {string} groupClassName\n     * @param {NodeList} groups\n     */\n    static addClassToGroups(groupClassName, groups){\n\n        for(let group of groups){\n\n            //add class if needed\n            group.classList.add(groupClassName);\n        }\n    }\n\n    /**\n     * get deep link according to the current control states\n     * @return {string}\n     */\n    getDeepLink(){\n        const arr = this.controls.map(control => {\n\n            if(control.id){\n                return control.selected ? control.id + '=1' : control.id + '=0';\n            }\n            else{\n                return '';\n            }\n\n        }).filter(str => str !== '');\n        const unique = Array.from(new Set(arr));\n        return unique.join('&');\n    }\n}\n\nexport default LayoutControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\n\n/**\n * reset control\n */\nclass ResetControl extends BaseControlsGroup{\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        /**\n         * on button click\n         */\n        control.element.addEventListener('click', (e) => {\n\n            e.preventDefault();\n\n            if(window.jplist) {\n\n                window.jplist.resetControls(this.group, control);\n            }\n\n        }, false);\n    }\n\n}\n\nexport default ResetControl;","import BaseControlsGroup from '../base/groups/base-controls-group';\nimport FilterAction from \"../../actions/filter/filter.action\";\nimport BasePathFilterControl from \"../base/controls/filter/base-path-filter.control\";\nimport BaseTextFilterControl from \"../base/controls/filter/base-text-filter.control\";\nimport BaseRangeFilterControl from \"../base/controls/filter/base-range-filter.control\";\n\n/**\n * counter control\n * Example:\n * <span\n     data-jplist-control=\"counter\"\n     data-group=\"group1\"\n     data-format=\"({count})\"\n     data-path=\".title\"\n     data-mode=\"dynamic\"\n     data-name=\"counter-title-filter\"\n     data-filter-type=\"path\"></span>\n */\nclass CounterControl extends BaseControlsGroup{\n\n    /**\n     * get dynamic counter value\n     * @param {Array.<HTMLElement>} filtered\n     * @param {BaseControl} baseFilterControl\n     * @param {string} filterType - text, path or range\n     * @return {number} count\n     */\n    static getDynamicCounterValue(baseFilterControl, filterType, filtered){\n\n        let count = 0;\n\n        filtered = CounterControl.getFilteredItems(baseFilterControl, filterType, filtered);\n\n        return filtered.length;\n    }\n\n    /**\n     * get static counter value\n     * @param {BaseControl} baseFilterControl\n     * @param {string} filterType - text, path or range\n     * @param {Array.<object>} group\n     * @return {number} count\n     */\n    static getStaticCounterValue(baseFilterControl, filterType, group){\n\n        let count = 0;\n\n        //there can be more than one block of items with the same group name\n        //each itemsBlock has structure: {root: HTMLElement, items: Array.<HTMLElement>}\n        for(let itemsBlock of group){\n\n            let filtered = itemsBlock.items;\n\n            filtered = CounterControl.getFilteredItems(baseFilterControl, filterType, filtered);\n\n            count += filtered.length;\n        }\n\n        return count;\n    }\n\n    /**\n     * get filtered items\n     * @param {BaseControl} baseFilterControl\n     * @param {string} filterType - text, path or range\n     * @param {Array.<HTMLElement>} filtered\n     * @return {Array.<HTMLElement>}\n     */\n    static getFilteredItems(baseFilterControl, filterType, filtered){\n\n        switch(filterType){\n            case 'text' : {\n                filtered = FilterAction.textFilter(\n                    filtered,\n                    baseFilterControl.text,\n                    baseFilterControl.path,\n                    baseFilterControl.mode,\n                    baseFilterControl.regex);\n                break;\n            }\n\n            case 'path' : {\n                filtered = FilterAction.pathFilter(filtered,\n                    baseFilterControl.path,\n                    baseFilterControl.isInverted);\n                break;\n            }\n\n            case 'range' : {\n                filtered = FilterAction.rangeFilter(filtered,\n                    baseFilterControl.path,\n                    baseFilterControl.from,\n                    baseFilterControl.to,\n                    baseFilterControl.min,\n                    baseFilterControl.max);\n                break;\n            }\n        }\n\n        return filtered;\n    }\n\n    /**\n     * render control HTML\n     * @param {number} countValue\n     */\n    render(countValue){\n\n        for(let control of this.controls){\n\n            control.element.innerHTML = control.format.replace('{count}', countValue);\n        }\n    }\n\n    /**\n     * add control to the group\n     * @param {BaseControl} control\n     * @return {BaseControl|null}\n     */\n    addControl(control){\n\n        super.addControl(control);\n\n        control.filterType = control.element.getAttribute('data-filter-type') || 'path'; //text, path or range\n        control.format = control.element.getAttribute('data-format') || '{count}';\n        control.mode = control.element.getAttribute('data-mode') || 'dynamic'; //static or dynamic\n\n        let baseFilterControl = null;\n\n        switch(control.filterType){\n\n            case 'text' : {\n\n                baseFilterControl = new BaseTextFilterControl(control.element);\n                break;\n            }\n\n            case 'path' : {\n\n                baseFilterControl = new BasePathFilterControl(control.element);\n                break;\n            }\n\n            case 'range' : {\n\n                baseFilterControl = new BaseRangeFilterControl(control.element);\n                break;\n            }\n        }\n\n        control.element.addEventListener('jplist.state', (e) => {\n\n            if(!baseFilterControl || !e.jplistState) return;\n\n            let count = 0;\n\n            if(control.mode === 'static' && e.jplistState.groups && e.jplistState.groups.has(control.group)){\n\n                //find group by name\n                const group = e.jplistState.groups.get(control.group);\n\n                count = CounterControl.getStaticCounterValue(baseFilterControl, control.filterType, group);\n            }\n\n            if(control.mode === 'dynamic' && e.jplistState.filtered && e.jplistState.filtered.length > 0){\n\n                count = CounterControl.getDynamicCounterValue(baseFilterControl, control.filterType, e.jplistState.filtered);\n            }\n\n            //render counter HTML\n            this.render(count);\n\n        }, false);\n    }\n}\n\nexport default CounterControl;","/*\n\n           |----\n           |  /\n           |  \\\n           |----\n           |\n          /*\\\n         // \\\\\n        //   \\\\\n       //=====\\\\\n      //       \\\\\n----| |=========| |----\n \\  | |         | |  /\n /  | |    []   | |  \\\n----| |         | |----\n    | |    []   | |\n   /=\\|         |/=\\\n  //=\\\\    []   //=\\\\\n //===\\\\       //===\\\\\n//=====\\\\     //=====\\\\\n||=====||=====||=====||\n-----------------------\n|||||||||||||||||||||||\n-----------------------\n||       *****       ||\n||      |||||||      ||\n||     ||  |  ||     ||\n||    ||   |   ||    ||\n||    ||  (|)  ||    ||\n||   ||    |    ||   ||\n||   ||    |    ||   ||\n**===================**/\n\nimport jPList from './jplist';\n\n//sort\nimport HiddenSortControl from './controls/sort/hidden-sort/hidden-sort.control';\nimport ButtonsSortControl from './controls/sort/buttons-sort/buttons-sort.control';\nimport RadioButtonsSortControl from './controls/sort/radio-buttons-sort/radio-buttons-sort.control';\nimport CheckboxSortControl from './controls/sort/checkbox-sort/checkbox-sort.control';\nimport SelectSortControl from './controls/sort/select-sort/select-sort.control';\nimport DropdownSortControl from './controls/sort/dropdown-sort/dropdown-sort.control';\n\n//pagination\nimport PaginationControl from './controls/pagination/pagination.control';\n\n//text filter\nimport TextboxFilterControl from './controls/filter/text-filters/textbox-filter/textbox-filter.control';\nimport CheckboxTextFilterControl from './controls/filter/text-filters/checkbox-text-filter/checkbox-text-filter.control';\nimport RadioButtonsTextFilterControl from './controls/filter/text-filters/radio-buttons-text-filter/radio-buttons-text-filter.control';\nimport ButtonsTextFilterControl from './controls/filter/text-filters/buttons-text-filter/buttons-text-filter.control';\n\n//path filter\nimport SelectFilterControl from './controls/filter/path-filters/select-filter/select-filter.control';\nimport CheckboxPathFilterControl from './controls/filter/path-filters/checkbox-path-filter/checkbox-path-filter.control';\nimport RadioButtonsPathFilterControl from './controls/filter/path-filters/radio-buttons-path-filter/radio-buttons-path-filter.control';\nimport ButtonsPathFilterControl from './controls/filter/path-filters/buttons-path-filter/buttons-path-filter.control';\nimport DropdownFilterControl from './controls/filter/path-filters/dropdown-filter/dropdown-filter.control';\n\n//range filter\nimport ButtonsRangeFilter from './controls/filter/range-filters/buttons-range-filter/buttons-range-filter.control';\nimport RangeSliderFilter from './controls/filter/range-filters/slider-range-filter/slider-range-filter.control';\n\n//other\nimport NoResultsControl from './controls/no-results/no-results.control';\nimport DropdownControl from './controls/base/controls/dropdown/base-dropdown.control';\nimport LayoutControl from './controls/layout/layout.control';\nimport ResetControl from './controls/reset/reset.control';\nimport CounterControl from './controls/counter/counter.control';\n\n(() => {\n    'use strict';\n\n    //custom events polyfill for IE 10+\n    //https://developer.mozilla.org/en-US/docs/Web/API/CustomEvent/CustomEvent\n    if (typeof window.CustomEvent !== 'function' ){\n\n        const CustomEvent = (event, params) => {\n            params = params || { bubbles: false, cancelable: false, detail: undefined };\n            var evt = document.createEvent( 'CustomEvent' );\n            evt.initCustomEvent( event, params.bubbles, params.cancelable, params.detail );\n            return evt;\n        };\n\n        CustomEvent.prototype = window.Event.prototype;\n        window.CustomEvent = CustomEvent;\n    }\n\n    /**\n     * global jplist function, one per page\n     */\n    window.jplist = window.jplist || {};\n\n    /**\n     * registered control types\n     * @type {Map}\n     */\n    window.jplist.controlTypes = window.jplist.controlTypes || new Map([\n        ['hidden-sort', HiddenSortControl],\n        ['sort-buttons', ButtonsSortControl],\n        ['radio-buttons-sort', RadioButtonsSortControl],\n        ['checkbox-sort', CheckboxSortControl],\n        ['select-sort', SelectSortControl],\n        ['dropdown-sort', DropdownSortControl],\n\n        ['pagination', PaginationControl],\n\n        ['textbox-filter', TextboxFilterControl],\n        ['checkbox-text-filter', CheckboxTextFilterControl],\n        ['radio-buttons-text-filter', RadioButtonsTextFilterControl],\n        ['buttons-text-filter', ButtonsTextFilterControl],\n\n        ['select-filter', SelectFilterControl],\n        ['dropdown-filter', DropdownFilterControl],\n        ['checkbox-path-filter', CheckboxPathFilterControl],\n        ['radio-buttons-path-filter', RadioButtonsPathFilterControl],\n        ['buttons-path-filter', ButtonsPathFilterControl],\n\n        ['buttons-range-filter', ButtonsRangeFilter],\n        ['slider-range-filter', RangeSliderFilter],\n\n        ['no-results', NoResultsControl],\n        ['dropdown', DropdownControl],\n        ['layout', LayoutControl],\n        ['reset', ResetControl],\n        ['counter', CounterControl]\n    ]);\n\n    let jplist = new jPList();\n\n    /**\n     * external api\n     */\n    window.jplist.init = jplist.init.bind(jplist);\n    window.jplist.refresh = jplist.refresh.bind(jplist);\n    window.jplist.resetControls = jplist.resetControls.bind(jplist);\n    window.jplist.resetControl = jplist.resetControl.bind(jplist);\n    window.jplist.resetContent = jplist.resetContent.bind(jplist);\n})();"],"sourceRoot":""}